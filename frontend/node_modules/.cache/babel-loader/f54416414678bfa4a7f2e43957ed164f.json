{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/ResetBtn.js\";\nimport React, { Component } from 'react';\nimport '../../../assets/css/ControlCenter/ResetBtn.scss';\nimport { faTrashAlt, faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { resetComponentStyles } from \"../../../store/libraryState/actions\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ResetBtn extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isActive: false\n    };\n\n    this.handleClick = e => {\n      // предупредить поведение по умолчанию\n      e.preventDefault(); // если по кнопке недавно нажимали, то ничего не предпринимать\n\n      if (this.isActive()) return null; // в ином случае сбросить стили компонента\n\n      const {\n        resetComponentStyles,\n        componentName\n      } = this.props;\n      resetComponentStyles(componentName); // сделать кнопку временно активной (нажатой)\n\n      this.setState({\n        isActive: true\n      }); // через 2 секунды возвратить кнопку в начальное состояние\n\n      setTimeout(() => {\n        this.setState({\n          isActive: false\n        });\n      }, 2000);\n    };\n\n    this.isActive = () => {\n      return this.state.isActive;\n    };\n  }\n\n  render() {\n    const condition = this.isActive() ? 'active' : 'false'; // иконки корзины и галочки кнопки\n\n    const trashIcon = /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      className: `reset-btn__trash-icon`,\n      icon: faTrashAlt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 27\n    }, this);\n\n    const checkIcon = /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      className: `reset-btn__check-icon`,\n      icon: faCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 27\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `reset-btn reset-btn_${condition}`,\n      onClick: this.handleClick,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"RESET\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset-btn__wrapper\",\n        children: [trashIcon, checkIcon]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this);\n  } // обработчик клика по кнопке\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    componentName: state.currentComponent.componentName\n  };\n};\n\nconst mapDispatchToProps = {\n  resetComponentStyles\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetBtn);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/ResetBtn.js"],"names":["React","Component","faTrashAlt","faCheck","FontAwesomeIcon","resetComponentStyles","connect","ResetBtn","state","isActive","handleClick","e","preventDefault","componentName","props","setState","setTimeout","render","condition","trashIcon","checkIcon","mapStateToProps","currentComponent","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,iDAAP;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,mCAApC;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,oBAAR,QAAmC,qCAAnC;AACA,SAAQC,OAAR,QAAsB,aAAtB;;;AAGA,MAAMC,QAAN,SAAuBN,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC7BO,KAD6B,GACrB;AACJC,MAAAA,QAAQ,EAAE;AADN,KADqB;;AAAA,SAwB7BC,WAxB6B,GAwBdC,CAAD,IAAO;AACjB;AACAA,MAAAA,CAAC,CAACC,cAAF,GAFiB,CAIjB;;AACA,UAAK,KAAKH,QAAL,EAAL,EAAuB,OAAO,IAAP,CALN,CAMjB;;AACA,YAAM;AAAEJ,QAAAA,oBAAF;AAAwBQ,QAAAA;AAAxB,UAA0C,KAAKC,KAArD;AACAT,MAAAA,oBAAoB,CAACQ,aAAD,CAApB,CARiB,CAUjB;;AACA,WAAKE,QAAL,CAAc;AACVN,QAAAA,QAAQ,EAAE;AADA,OAAd,EAXiB,CAejB;;AACAO,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKD,QAAL,CAAc;AACVN,UAAAA,QAAQ,EAAE;AADA,SAAd;AAGH,OAJS,EAIP,IAJO,CAAV;AAKH,KA7C4B;;AAAA,SA+C7BA,QA/C6B,GA+ClB,MAAM;AACb,aAAO,KAAKD,KAAL,CAAWC,QAAlB;AACH,KAjD4B;AAAA;;AAK7BQ,EAAAA,MAAM,GAAI;AACN,UAAMC,SAAS,GAAG,KAAKT,QAAL,KAAkB,QAAlB,GAA6B,OAA/C,CADM,CAEN;;AACA,UAAMU,SAAS,gBAAG,QAAC,eAAD;AAAiB,MAAA,SAAS,EAAG,uBAA7B;AAAqD,MAAA,IAAI,EAAEjB;AAA3D;AAAA;AAAA;AAAA;AAAA,YAAlB;;AACA,UAAMkB,SAAS,gBAAG,QAAC,eAAD;AAAiB,MAAA,SAAS,EAAG,uBAA7B;AAAqD,MAAA,IAAI,EAAEjB;AAA3D;AAAA;AAAA;AAAA;AAAA,YAAlB;;AAEA,wBACI;AAAQ,MAAA,SAAS,EAAG,uBAAsBe,SAAU,EAApD;AACQ,MAAA,OAAO,EAAE,KAAKR,WADtB;AAAA,8BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,mBACKS,SADL,EAEKC,SAFL;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH,GArB4B,CAuB7B;;;AAvB6B;;AAoDjC,MAAMC,eAAe,GAAIb,KAAD,IAAW;AAC/B,SAAO;AACHK,IAAAA,aAAa,EAAEL,KAAK,CAACc,gBAAN,CAAuBT;AADnC,GAAP;AAGH,CAJD;;AAMA,MAAMU,kBAAkB,GAAG;AACvBlB,EAAAA;AADuB,CAA3B;AAIA,eAAeC,OAAO,CAACe,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChB,QAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport '../../../assets/css/ControlCenter/ResetBtn.scss'\nimport { faTrashAlt, faCheck } from \"@fortawesome/free-solid-svg-icons\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {resetComponentStyles} from \"../../../store/libraryState/actions\";\nimport {connect} from \"react-redux\";\n\n\nclass ResetBtn extends Component {\n    state = {\n        isActive: false,\n    }\n\n    render () {\n        const condition = this.isActive() ? 'active' : 'false';\n        // иконки корзины и галочки кнопки\n        const trashIcon = <FontAwesomeIcon className={`reset-btn__trash-icon`} icon={faTrashAlt}/>\n        const checkIcon = <FontAwesomeIcon className={`reset-btn__check-icon`} icon={faCheck}/>\n\n        return (\n            <button className={`reset-btn reset-btn_${condition}`}\n                    onClick={this.handleClick}>\n                <span>RESET</span>\n                <div className=\"reset-btn__wrapper\">\n                    {trashIcon}\n                    {checkIcon}\n                </div>\n            </button>\n        )\n    }\n\n    // обработчик клика по кнопке\n    handleClick = (e) => {\n        // предупредить поведение по умолчанию\n        e.preventDefault();\n\n        // если по кнопке недавно нажимали, то ничего не предпринимать\n        if ( this.isActive() ) return null;\n        // в ином случае сбросить стили компонента\n        const { resetComponentStyles, componentName } = this.props;\n        resetComponentStyles(componentName)\n\n        // сделать кнопку временно активной (нажатой)\n        this.setState({\n            isActive: true\n        })\n\n        // через 2 секунды возвратить кнопку в начальное состояние\n        setTimeout(() => {\n            this.setState({\n                isActive: false,\n            })\n        }, 2000);\n    }\n\n    isActive = () => {\n        return this.state.isActive\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        componentName: state.currentComponent.componentName\n    }\n}\n\nconst mapDispatchToProps = {\n    resetComponentStyles\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetBtn);\n"]},"metadata":{},"sourceType":"module"}
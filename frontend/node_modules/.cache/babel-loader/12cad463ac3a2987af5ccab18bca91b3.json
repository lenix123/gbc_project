{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/AppMenu/FileBtn.js\";\nimport React, { Component } from 'react';\nimport { fileIcon } from './InnerTree';\nimport { connect } from \"react-redux\";\nimport { setComponentName } from \"../../store/currentComponent/actions\"; // FileBtn – компонент-кнопка, отображающая название файла на боковой панели\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FileBtn extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isFocused: false\n    };\n\n    this.displayComponent = () => {\n      const {\n        setComponentName,\n        file,\n        isUserComponent,\n        userComponentName\n      } = this.props;\n      const fileName = file.slice(0, -3);\n\n      if (isUserComponent) {\n        setComponentName(userComponentName, isUserComponent, fileName);\n      } else {\n        setComponentName(fileName, isUserComponent, \"\");\n      } // присвоить компоненту фокус, если он отображается, и наоборот\n\n\n      this.setState({\n        isFocused: !this.isFocused()\n      });\n    };\n\n    this.eliminate = () => {\n      this.setState({\n        isFocused: !this.isFocused()\n      });\n    };\n\n    this.isFocused = () => {\n      return this.state.isFocused;\n    };\n  }\n\n  // метод, вызывающийся перед рендером компонента\n  // метод позволяет отследить изменение фокуса на компоненте\n  static getDerivedStateFromProps(props, state) {\n    const {\n      componentName,\n      file,\n      isUserComponent,\n      userComponentName\n    } = props;\n    const fileName = file.slice(0, -3);\n    let isEqual;\n\n    if (isUserComponent) {} // если кнопка в фокусе,\n    // но ее название не совпадает с названием прожатой в данный момент кнопки,\n    // то фокус нужно снять, и наоборот\n\n\n    if (state.isFocused && !isEqual) {\n      return {\n        isFocused: false\n      };\n    } else if (!state.isFocused && isEqual) {\n      return {\n        isFocused: true\n      };\n    } // в ином случае оставить без изменений\n\n\n    return null;\n  }\n\n  render() {\n    const condition = this.isFocused() ? 'active' : 'disabled';\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"tree-element__file\",\n      onClick: this.displayComponent,\n      onMouseOver: this.eliminate,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tree-element__highlighter tree-element__highlighter_${condition}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), fileIcon, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-element__wrapper\",\n        children: this.props.file\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  } // метод вызывает колбэк, отображающий компонент или прячущий его\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    componentName: state.currentComponent.componentName,\n    isUserComponent: state.currentComponent.isUserComponent,\n    userComponentName: state.currentComponent.userComponentName\n  };\n};\n\nconst mapDispatchToProps = {\n  setComponentName\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBtn);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/AppMenu/FileBtn.js"],"names":["React","Component","fileIcon","connect","setComponentName","FileBtn","state","isFocused","displayComponent","file","isUserComponent","userComponentName","props","fileName","slice","setState","eliminate","getDerivedStateFromProps","componentName","isEqual","render","condition","mapStateToProps","currentComponent","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport { fileIcon } from './InnerTree'\nimport {connect} from \"react-redux\";\nimport {setComponentName} from \"../../store/currentComponent/actions\";\n\n// FileBtn – компонент-кнопка, отображающая название файла на боковой панели\nclass FileBtn extends Component {\n    state = {\n        isFocused: false\n    }\n\n    // метод, вызывающийся перед рендером компонента\n    // метод позволяет отследить изменение фокуса на компоненте\n    static getDerivedStateFromProps(props, state) {\n        const { componentName, file, isUserComponent, userComponentName } = props;\n        const fileName = file.slice(0, -3);\n        let isEqual;\n\n        if (isUserComponent) {\n            \n        }\n\n        // если кнопка в фокусе,\n        // но ее название не совпадает с названием прожатой в данный момент кнопки,\n        // то фокус нужно снять, и наоборот\n        if (state.isFocused && !isEqual) {\n            return { isFocused: false }\n        } else if (!state.isFocused && isEqual) {\n            return { isFocused: true }\n        }\n\n        // в ином случае оставить без изменений\n        return null;\n    }\n\n    render() {\n        const condition = this.isFocused() ? 'active' : 'disabled';\n\n        return (\n            <button className=\"tree-element__file\"\n                    onClick={ this.displayComponent }\n                    onMouseOver={ this.eliminate }>\n                <div className={`tree-element__highlighter tree-element__highlighter_${condition}`}/>\n                    {fileIcon}\n                <div className=\"tree-element__wrapper\">\n                    {this.props.file}\n                </div>\n            </button>\n        )\n    }\n\n    // метод вызывает колбэк, отображающий компонент или прячущий его\n    displayComponent = () => {\n        const { setComponentName, file, isUserComponent, userComponentName } = this.props;\n        const fileName = file.slice(0, -3);\n\n        if (isUserComponent) {\n            setComponentName(userComponentName, isUserComponent, fileName)\n        } else {\n            setComponentName(fileName, isUserComponent, \"\");\n        }\n\n        // присвоить компоненту фокус, если он отображается, и наоборот\n        this.setState({\n            isFocused: !this.isFocused()\n        })\n    }\n\n    // подсвечивает компонент при наведении мыши\n    eliminate = () => {\n        this.setState({\n            isFocused: !this.isFocused()\n        })\n    }\n\n    isFocused = () => {\n        return this.state.isFocused;\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        componentName: state.currentComponent.componentName,\n        isUserComponent: state.currentComponent.isUserComponent,\n        userComponentName: state.currentComponent.userComponentName,\n    }\n}\n\nconst mapDispatchToProps = {\n    setComponentName\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBtn);"]},"metadata":{},"sourceType":"module"}
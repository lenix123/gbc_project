{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/App.js\";\nimport React, { Component } from 'react';\nimport '../assets/css/App.scss';\nimport Sidebar from \"./AppMenu/Sidebar\";\nimport Header from \"./AppMenu/Header\";\nimport ThemeContext from \"./ThemeControl/ThemeContext\";\nimport Workspace from \"./Workspace\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"../store/reducers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst store = createStore(rootReducer); // Компонент App несет в себе функцию отображения всего приложения в целом\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      theme: 'light'\n    };\n\n    this.toggleTheme = () => {\n      this.setState({\n        theme: this.state.theme === 'light' ? 'dark' : 'light'\n      });\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // Provider позволяет дочерним компонентам подписаться на изменения UI-темы,\n      // передавая в качестве пропсов значение темы (theme) и колбэк toggleTheme\n      _jsxDEV(Provider, {\n        store: store,\n        children: /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n          value: {\n            theme: this.state.theme,\n            toggleTheme: this.toggleTheme\n          },\n          children: /*#__PURE__*/_jsxDEV(\"main\", {\n            className: `app app_${this.state.theme}`,\n            children: [/*#__PURE__*/_jsxDEV(\"section\", {\n              className: \"app__menu\",\n              children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Workspace, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this)\n    );\n  } // функция toggleTheme устанавливает тему оформления приложения\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/App.js"],"names":["React","Component","Sidebar","Header","ThemeContext","Workspace","Provider","createStore","rootReducer","store","App","state","theme","toggleTheme","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,wBAAP;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,WAAR,QAA0B,OAA1B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;AAGA,MAAMC,KAAK,GAAGF,WAAW,CAACC,WAAD,CAAzB,C,CACA;;AACA,MAAME,GAAN,SAAkBT,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACxBU,KADwB,GAChB;AACJC,MAAAA,KAAK,EAAE;AADH,KADgB;;AAAA,SAwBxBC,WAxBwB,GAwBV,MAAM;AAChB,WAAKC,QAAL,CAAc;AACVF,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,KAAqB,OAArB,GAA+B,MAA/B,GAAwC;AADrC,OAAd;AAGH,KA5BuB;AAAA;;AAKxBG,EAAAA,MAAM,GAAG;AACL;AAAA;AACI;AACA;AACA,cAAC,QAAD;AAAU,QAAA,KAAK,EAAEN,KAAjB;AAAA,+BACI,QAAC,YAAD,CAAc,QAAd;AAAuB,UAAA,KAAK,EAAG;AAAEG,YAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAApB;AAA2BC,YAAAA,WAAW,EAAE,KAAKA;AAA7C,WAA/B;AAAA,iCACI;AAAM,YAAA,SAAS,EAAG,WAAU,KAAKF,KAAL,CAAWC,KAAM,EAA7C;AAAA,oCACI;AAAS,cAAA,SAAS,EAAC,WAAnB;AAAA,sCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAKI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,oBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAHJ;AAeH,GArBuB,CAuBxB;;;AAvBwB;;AA+B5B,eAAeF,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport '../assets/css/App.scss'\nimport Sidebar from \"./AppMenu/Sidebar\"\nimport Header from \"./AppMenu/Header\";\nimport ThemeContext from \"./ThemeControl/ThemeContext\";\nimport Workspace from \"./Workspace\";\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport rootReducer from \"../store/reducers\";\n\n\nconst store = createStore(rootReducer);\n// Компонент App несет в себе функцию отображения всего приложения в целом\nclass App extends Component {\n    state = {\n        theme: 'light',\n    }\n\n    render() {\n        return (\n            // Provider позволяет дочерним компонентам подписаться на изменения UI-темы,\n            // передавая в качестве пропсов значение темы (theme) и колбэк toggleTheme\n            <Provider store={store}>\n                <ThemeContext.Provider value={ { theme: this.state.theme, toggleTheme: this.toggleTheme } }>\n                    <main className={`app app_${this.state.theme}`}>\n                        <section className=\"app__menu\">\n                            <Header />\n                            <Sidebar />\n                        </section>\n                        <Workspace />\n                    </main>\n                </ThemeContext.Provider>\n            </Provider>\n        );\n    }\n\n    // функция toggleTheme устанавливает тему оформления приложения\n    toggleTheme = () => {\n        this.setState({\n            theme: this.state.theme === 'light' ? 'dark' : 'light',\n        });\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}
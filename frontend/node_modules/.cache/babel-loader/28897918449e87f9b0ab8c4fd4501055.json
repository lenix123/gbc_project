{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport '../assets/css/App.scss';\nimport Sidebar from \"./AppMenu/Sidebar\";\nimport Header from \"./AppMenu/Header\";\nimport ThemeContext from \"./ThemeControl/ThemeContext\";\nimport Workspace from \"./Workspace\";\nimport { connect, Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"../store/reducers\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst store = createStore(rootReducer); // Компонент App несет в себе функцию отображения всего приложения в целом\n\nfunction App(props) {\n  _s();\n\n  const {\n    appTheme\n  } = props;\n  console.log(appTheme);\n  const [userComponents, setUserComponents] = useState([]);\n  useEffect(() => {\n    axios({\n      method: \"GET\",\n      url: \"http://127.0.0.1:8000/api/\"\n    }).then(response => {\n      const userComponents = response.data;\n      setUserComponents(userComponents);\n    });\n  }, [setUserComponents]);\n\n  if (!userComponents || userComponents.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u043D\\u0435\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n      value: {\n        theme: \"light\",\n        toggleTheme: this.toggleTheme\n      },\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        className: `app app_${\"light\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"app__menu\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Workspace, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n} // class App extends Component {\n//     state = {\n//         theme: 'light',\n//     }\n//\n//     render() {\n//         return (\n//             // Provider позволяет дочерним компонентам подписаться на изменения UI-темы,\n//             // передавая в качестве пропсов значение темы (theme) и колбэк toggleTheme\n//             <Provider store={store}>\n//                 <ThemeContext.Provider value={ { theme: this.state.theme, toggleTheme: this.toggleTheme } }>\n//                     <main className={`app app_${this.state.theme}`}>\n//                         <section className=\"app__menu\">\n//                             <Header />\n//                             <Sidebar />\n//                         </section>\n//                         <Workspace />\n//                     </main>\n//                 </ThemeContext.Provider>\n//             </Provider>\n//         );\n//     }\n//\n//     // функция toggleTheme устанавливает тему оформления приложения\n//     toggleTheme = () => {\n//         this.setState({\n//             theme: this.state.theme === 'light' ? 'dark' : 'light',\n//         });\n//     }\n// }\n\n\n_s(App, \"4bylw0jNrMf2TJGeLKRjQOE6/LY=\");\n\n_c = App;\n\nconst mapStateToProps = state => {\n  return {\n    appTheme: state.appTheme\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/App.js"],"names":["React","useState","useEffect","Sidebar","Header","ThemeContext","Workspace","connect","Provider","createStore","rootReducer","axios","store","App","props","appTheme","console","log","userComponents","setUserComponents","method","url","then","response","data","length","theme","toggleTheme","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,wBAAP;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,OAAR,EAAiBC,QAAjB,QAAgC,aAAhC;AACA,SAAQC,WAAR,QAA0B,OAA1B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,KAAK,GAAGH,WAAW,CAACC,WAAD,CAAzB,C,CAEA;;AACA,SAASG,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAChB,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAM,CAACG,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,EAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,CAAC;AACFS,MAAAA,MAAM,EAAE,KADN;AAEFC,MAAAA,GAAG,EAAE;AAFH,KAAD,CAAL,CAGGC,IAHH,CAGQC,QAAQ,IAAI;AAChB,YAAML,cAAc,GAAGK,QAAQ,CAACC,IAAhC;AACAL,MAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACH,KAND;AAOH,GARQ,EAQN,CAACC,iBAAD,CARM,CAAT;;AAUA,MAAI,CAACD,cAAD,IAAmBA,cAAc,CAACO,MAAf,KAA0B,CAAjD,EAAoD;AAChD,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEb,KAAjB;AAAA,2BACI,QAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAG;AAAEc,QAAAA,KAAK,EAAE,OAAT;AAAkBC,QAAAA,WAAW,EAAE,KAAKA;AAApC,OAA/B;AAAA,6BACI;AAAM,QAAA,SAAS,EAAG,WAAU,OAAQ,EAApC;AAAA,gCACI;AAAS,UAAA,SAAS,EAAC,WAAnB;AAAA,kCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAhESd,G;;KAAAA,G;;AAkET,MAAMe,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHd,IAAAA,QAAQ,EAAEc,KAAK,CAACd;AADb,GAAP;AAGH,CAJD;;AAMA,eAAeR,OAAO,CAACqB,eAAD,CAAP,CAAyBf,GAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport '../assets/css/App.scss';\nimport Sidebar from \"./AppMenu/Sidebar\";\nimport Header from \"./AppMenu/Header\";\nimport ThemeContext from \"./ThemeControl/ThemeContext\";\nimport Workspace from \"./Workspace\";\nimport {connect, Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport rootReducer from \"../store/reducers\";\nimport axios from \"axios\";\n\n\nconst store = createStore(rootReducer);\n\n// Компонент App несет в себе функцию отображения всего приложения в целом\nfunction App(props) {\n    const { appTheme } = props\n    console.log(appTheme)\n    const [userComponents, setUserComponents] = useState([])\n\n    useEffect(() => {\n        axios({\n            method: \"GET\",\n            url: \"http://127.0.0.1:8000/api/\"\n        }).then(response => {\n            const userComponents = response.data\n            setUserComponents(userComponents)\n        })\n    }, [setUserComponents])\n\n    if (!userComponents || userComponents.length === 0) {\n        return <p>данных нет</p>\n    }\n\n    return (\n        <Provider store={store}>\n            <ThemeContext.Provider value={ { theme: \"light\", toggleTheme: this.toggleTheme } }>\n                <main className={`app app_${\"light\"}`}>\n                    <section className=\"app__menu\">\n                        <Header />\n                        <Sidebar />\n                    </section>\n                    <Workspace />\n                </main>\n            </ThemeContext.Provider>\n        </Provider>\n    );\n}\n\n\n// class App extends Component {\n//     state = {\n//         theme: 'light',\n//     }\n//\n//     render() {\n//         return (\n//             // Provider позволяет дочерним компонентам подписаться на изменения UI-темы,\n//             // передавая в качестве пропсов значение темы (theme) и колбэк toggleTheme\n//             <Provider store={store}>\n//                 <ThemeContext.Provider value={ { theme: this.state.theme, toggleTheme: this.toggleTheme } }>\n//                     <main className={`app app_${this.state.theme}`}>\n//                         <section className=\"app__menu\">\n//                             <Header />\n//                             <Sidebar />\n//                         </section>\n//                         <Workspace />\n//                     </main>\n//                 </ThemeContext.Provider>\n//             </Provider>\n//         );\n//     }\n//\n//     // функция toggleTheme устанавливает тему оформления приложения\n//     toggleTheme = () => {\n//         this.setState({\n//             theme: this.state.theme === 'light' ? 'dark' : 'light',\n//         });\n//     }\n// }\n\nconst mapStateToProps = (state) => {\n    return {\n        appTheme: state.appTheme\n    }\n}\n\nexport default connect(mapStateToProps)(App);"]},"metadata":{},"sourceType":"module"}
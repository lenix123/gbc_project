{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/ColorForm.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from \"react-color\";\nimport { setComponentState } from \"../../../../../store/libraryState/actions\";\nimport { connect } from \"react-redux\";\nimport { setUserComponentStyle } from \"../../../../../store/userLibrary/actions\"; // форма выбора цвета\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ColorForm extends Component {\n  constructor(props) {\n    super(props); // isOpen: открыта ли цветовая палитра?\n    // color: выбранный на палитре цвет\n\n    this.onClickHandler = () => {\n      this.setState(currentState => ({\n        isOpen: !currentState.isOpen\n      }));\n    };\n\n    this.onClickOutsideHandler = event => {\n      if (this.state.isOpen && !this.toggleContainer.current.contains(event.target)) {\n        this.setState({\n          isOpen: false\n        });\n      }\n    };\n\n    this.handleChange = color => {\n      const {\n        setComponentState,\n        setUserComponentStyle,\n        styleType,\n        componentName,\n        isUserComponent,\n        userComponentName\n      } = this.props;\n      const value = color.hex;\n\n      if (isUserComponent) {\n        setUserComponentStyle(userComponentName, styleType, value);\n      } else {\n        setComponentState(componentName, styleType, value);\n      }\n\n      this.setState({\n        value: value\n      });\n    };\n\n    this.isOpen = () => {\n      return this.state.isOpen;\n    };\n\n    this.state = {\n      isOpen: false,\n      color: '#ec9360'\n    }; // создание рефа, который прикрепится к палитре и к самой форме\n\n    this.toggleContainer = /*#__PURE__*/React.createRef();\n  } // метод, вызывающийся сразу после рендера компонента\n  // обработчик событий дает возможность скрыть цветовую палитру при нажатии за её пределы\n\n\n  componentDidMount() {\n    window.addEventListener('click', this.onClickOutsideHandler);\n  } // удаляем обработчик, объявленный выше\n\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.onClickOutsideHandler);\n  } // метод жизненного цикла, позволяющий сбросить значение формы,\n  // а также синхронизировать состояние формы со стилем компонента\n\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      componentStyles,\n      styleType\n    } = props; // если стили были сброшены вручную (resetStyles), то форма примет значения по умолчанию,\n\n    if (componentStyles[styleType] === '' && state.color !== '#ec9360' && !state.isOpen) {\n      return {\n        isOpen: false,\n        color: '#ec9360'\n      }; // синхронизация значения формы и стиля компонента\n    } else if (componentStyles[styleType] !== state.color && componentStyles[styleType] !== '') {\n      return {\n        isOpen: state.isOpen,\n        color: componentStyles[styleType]\n      };\n    } // в ином случае оставить без изменений\n\n\n    return null;\n  } // при нажатии на форму открывает или закрывает цветовую палитру\n\n\n  render() {\n    const {\n      label\n    } = this.props; // отображать или скрыть цветовую палитру\n\n    const colorPicker = this.isOpen() && /*#__PURE__*/_jsxDEV(ChromePicker, {\n      color: this.state.color,\n      onChange: this.handleChange,\n      disableAlpha: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 46\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form__label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__wrapper\",\n        ref: this.toggleContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"form__color-btn\",\n          type: \"button\",\n          onClick: this.onClickHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              background: this.state.color\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.state.color\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form__color-picker\",\n          children: colorPicker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  } // обрабатывает изменение цвета и с помощью колбэка передает эти изменения\n\n\n}\n\nconst mapStateToProps = state => {\n  const isUserComponent = state.currentComponent.isUserComponent;\n  const componentName = state.currentComponent.componentName;\n  const userComponentName = state.currentComponent.userComponentName;\n  const componentStyles = isUserComponent ? state.userLibrary[userComponentName] : state.libraryState[componentName];\n  return {\n    componentStyles,\n    componentName,\n    isUserComponent,\n    userComponentName\n  };\n};\n\nconst mapDispatchToProps = {\n  setComponentState,\n  setUserComponentStyle\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ColorForm);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/ColorForm.js"],"names":["React","Component","ChromePicker","setComponentState","connect","setUserComponentStyle","ColorForm","constructor","props","onClickHandler","setState","currentState","isOpen","onClickOutsideHandler","event","state","toggleContainer","current","contains","target","handleChange","color","styleType","componentName","isUserComponent","userComponentName","value","hex","createRef","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","getDerivedStateFromProps","componentStyles","render","label","colorPicker","background","mapStateToProps","currentComponent","userLibrary","libraryState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {ChromePicker} from \"react-color\";\nimport {setComponentState} from \"../../../../../store/libraryState/actions\";\nimport {connect} from \"react-redux\";\nimport {setUserComponentStyle} from \"../../../../../store/userLibrary/actions\";\n\n// форма выбора цвета\nclass ColorForm extends Component {\n    constructor(props) {\n        super(props);\n\n        // isOpen: открыта ли цветовая палитра?\n        // color: выбранный на палитре цвет\n        this.state = {\n            isOpen: false,\n            color: '#ec9360',\n        };\n\n        // создание рефа, который прикрепится к палитре и к самой форме\n        this.toggleContainer = React.createRef();\n    }\n\n    // метод, вызывающийся сразу после рендера компонента\n    // обработчик событий дает возможность скрыть цветовую палитру при нажатии за её пределы\n    componentDidMount() {\n        window.addEventListener('click', this.onClickOutsideHandler);\n    }\n\n    // удаляем обработчик, объявленный выше\n    componentWillUnmount() {\n        window.removeEventListener('click', this.onClickOutsideHandler);\n    }\n    \n    // метод жизненного цикла, позволяющий сбросить значение формы,\n    // а также синхронизировать состояние формы со стилем компонента\n    static getDerivedStateFromProps(props, state) {\n        const {componentStyles, styleType} = props;\n\n        // если стили были сброшены вручную (resetStyles), то форма примет значения по умолчанию,\n        if (componentStyles[styleType] === '' &&\n            state.color !== '#ec9360' &&\n            !state.isOpen\n           ) {\n            return {\n                isOpen: false,\n                color: '#ec9360',\n            }\n        // синхронизация значения формы и стиля компонента\n        } else if (componentStyles[styleType] !== state.color && componentStyles[styleType] !== '') {\n            return {\n                isOpen: state.isOpen,\n                color: componentStyles[styleType]\n            }\n        }\n\n        // в ином случае оставить без изменений\n        return null;\n    }\n\n    // при нажатии на форму открывает или закрывает цветовую палитру\n    onClickHandler = () => {\n        this.setState(currentState => ({\n            isOpen: !currentState.isOpen\n        }));\n    }\n\n    // если нажатие произведено вне цветовой палитры, то она будет закрыта\n    onClickOutsideHandler = (event) => {\n        if (this.state.isOpen && !this.toggleContainer.current.contains(event.target)) {\n            this.setState({ isOpen: false });\n        }\n    }\n\n    render() {\n        const {label} = this.props;\n        // отображать или скрыть цветовую палитру\n        const colorPicker = this.isOpen() && <ChromePicker color={ this.state.color }\n                                                           onChange={ this.handleChange }\n                                                           disableAlpha={true}/>;\n\n        return (\n            <form className=\"form\">\n                <label className=\"form__label\">{label}</label>\n                <div className=\"form__wrapper\" ref={this.toggleContainer}>\n                   <button className=\"form__color-btn\"\n                          type=\"button\"\n                          onClick={this.onClickHandler}>\n                       <div style={{background: this.state.color}}/>\n                       <p>{this.state.color}</p>\n                    </button>\n\n                    <div className=\"form__color-picker\">\n                        {colorPicker}\n                    </div>\n                </div>\n            </form>\n        );\n    }\n\n    // обрабатывает изменение цвета и с помощью колбэка передает эти изменения\n    handleChange = (color) => {\n        const {setComponentState, setUserComponentStyle, styleType, componentName, isUserComponent, userComponentName} = this.props;\n        const value = color.hex;\n\n        if (isUserComponent) {\n            setUserComponentStyle(userComponentName, styleType, value);\n        } else {\n            setComponentState(componentName, styleType, value);\n        }\n\n        this.setState({\n            value: value,\n        })\n    }\n\n    isOpen = () => {\n        return this.state.isOpen;\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const isUserComponent = state.currentComponent.isUserComponent;\n    const componentName = state.currentComponent.componentName;\n    const userComponentName = state.currentComponent.userComponentName;\n    const componentStyles = isUserComponent ? state.userLibrary[userComponentName] : state.libraryState[componentName];\n\n    return {\n        componentStyles,\n        componentName,\n        isUserComponent,\n        userComponentName,\n    }\n}\n\nconst mapDispatchToProps = {\n    setComponentState,\n    setUserComponentStyle,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColorForm);\n"]},"metadata":{},"sourceType":"module"}
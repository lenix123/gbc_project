{"ast":null,"code":"var _jsxFileName = \"/home/lenix/gbc/src/components/AppMenu/FileBtn.js\";\nimport React, { Component } from 'react';\nimport { fileIcon } from './InnerTree';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FileBtn extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isCalled: false\n    };\n\n    this.displayComponent = () => {\n      const {\n        callComponent\n      } = this.props;\n      const fileName = this.props.file.slice(0, -3);\n      callComponent(fileName);\n\n      if (this.state.id) {\n        this.setState({\n          isCalled: false\n        });\n      } else {\n        this.setState({\n          isCalled: this.props.id\n        });\n      } // this.setState({\n      //     isCalled: !this.isCalled()\n      // })\n\n    };\n\n    this.isCalled = () => {\n      return this.state.isCalled;\n    };\n  }\n\n  render() {\n    const condition = this.isCalled() ? 'active' : 'disabled';\n    const {\n      userComponentName\n    } = this.props;\n    const fileName = this.props.file.slice(0, -3);\n    const isEqual = userComponentName === fileName;\n\n    if (this.isCalled() && !isEqual) {\n      this.setState({\n        isCalled: false\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"tree-element__file\",\n      onClick: this.displayComponent,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tree-element__highlighter ${condition}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), fileIcon, this.props.file]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default FileBtn;","map":{"version":3,"sources":["/home/lenix/gbc/src/components/AppMenu/FileBtn.js"],"names":["React","Component","fileIcon","FileBtn","state","isCalled","displayComponent","callComponent","props","fileName","file","slice","id","setState","render","condition","userComponentName","isEqual"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;;;AAEA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC5BG,KAD4B,GACpB;AACJC,MAAAA,QAAQ,EAAE;AADN,KADoB;;AAAA,SA4B5BC,gBA5B4B,GA4BT,MAAM;AACrB,YAAM;AAAEC,QAAAA;AAAF,UAAoB,KAAKC,KAA/B;AACA,YAAMC,QAAQ,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,CAAjB;AAEAJ,MAAAA,aAAa,CAACE,QAAD,CAAb;;AACA,UAAI,KAAKL,KAAL,CAAWQ,EAAf,EAAmB;AACf,aAAKC,QAAL,CAAc;AACVR,UAAAA,QAAQ,EAAE;AADA,SAAd;AAGH,OAJD,MAIO;AACH,aAAKQ,QAAL,CAAc;AACVR,UAAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWI;AADX,SAAd;AAGH,OAboB,CAerB;AACA;AACA;;AACH,KA9C2B;;AAAA,SAgD5BP,QAhD4B,GAgDjB,MAAM;AACb,aAAO,KAAKD,KAAL,CAAWC,QAAlB;AACH,KAlD2B;AAAA;;AAK5BS,EAAAA,MAAM,GAAG;AACL,UAAMC,SAAS,GAAG,KAAKV,QAAL,KAAkB,QAAlB,GAA6B,UAA/C;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAwB,KAAKR,KAAnC;AACA,UAAMC,QAAQ,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,CAAjB;AACA,UAAMM,OAAO,GAAGD,iBAAiB,KAAKP,QAAtC;;AAGA,QAAI,KAAKJ,QAAL,MAAmB,CAACY,OAAxB,EAAiC;AAC7B,WAAKJ,QAAL,CAAc;AACVR,QAAAA,QAAQ,EAAE;AADA,OAAd;AAGH;;AAED,wBACI;AAAQ,MAAA,SAAS,EAAC,oBAAlB;AACQ,MAAA,OAAO,EAAG,KAAKC,gBADvB;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAG,6BAA4BS,SAAU;AAAvD;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGKb,QAHL,EAIK,KAAKM,KAAL,CAAWE,IAJhB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AA1B2B;;AAqDhC,eAAeP,OAAf","sourcesContent":["import React, {Component} from 'react'\nimport { fileIcon } from './InnerTree'\n\nclass FileBtn extends Component {\n    state = {\n        isCalled: false\n    }\n\n    render() {\n        const condition = this.isCalled() ? 'active' : 'disabled';\n        const { userComponentName } = this.props;\n        const fileName = this.props.file.slice(0, -3);\n        const isEqual = userComponentName === fileName;\n\n\n        if (this.isCalled() && !isEqual) {\n            this.setState({\n                isCalled: false\n            })\n        }\n\n        return (\n            <button className=\"tree-element__file\"\n                    onClick={ this.displayComponent }>\n                <div className={`tree-element__highlighter ${condition}`}/>\n                {fileIcon}\n                {this.props.file}\n            </button>\n        )\n    }\n\n    displayComponent = () => {\n        const { callComponent } = this.props;\n        const fileName = this.props.file.slice(0, -3);\n\n        callComponent(fileName)\n        if (this.state.id) {\n            this.setState({\n                isCalled: false\n            })\n        } else {\n            this.setState({\n                isCalled: this.props.id\n            })\n        }\n\n        // this.setState({\n        //     isCalled: !this.isCalled()\n        // })\n    }\n\n    isCalled = () => {\n        return this.state.isCalled;\n    }\n}\n\nexport default FileBtn;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import StyleReader from \"./StyleReader\"; // функция textBuilder строит текст для вывода на сайте в разделе \"Export\"\n\nexport default function textBuilder(componentName, componentsState) {\n  let text;\n  const buttons = [\"Classic\", \"Outline\", \"Waves\"];\n  const authorization = [\"Login\", \"Email\", \"Telephone\", \"Password\"];\n\n  if (buttons.includes(componentName)) {\n    text = tagBuilder(componentName, componentsState[componentName]);\n  } else if (authorization.includes(componentName)) {\n    const isSimple = true;\n    text = AuthorizationText(componentName, componentsState, isSimple);\n  } else if (componentName === \"Data\") {\n    const replaceParams = [\"mask\"];\n    const additionalProp = [\"mask\"];\n    text = tagBuilder(\"Data\", componentsState[\"Data\"], additionalProp, replaceParams);\n  } else if (componentName === \"Card\") {\n    text = CardText(componentsState);\n  } else if (componentName === \"Entry\") {\n    text = EntryText(componentsState);\n  } else if (componentName === \"BankCard\") {\n    text = BankCardText(componentsState);\n  }\n\n  return text;\n}\n\nfunction AuthorizationText(formName, componentsState, isSimple) {\n  let componentStyle = componentsState[formName]; // делаем синхранизацию стилей для форм из Entry\n\n  if (!isSimple) {\n    const sync = componentsState[\"Entry\"].sync;\n\n    if (sync === \"Login\") {\n      // берём стили выбранной формы из состояния Entry\n      const typeForm = componentsState[\"Entry\"].type || \"Email\";\n      componentStyle = componentsState[typeForm];\n    } else if (sync === \"Pass\") {\n      // синхронизируем стили с формой \"Password\"\n      componentStyle = componentsState[\"Password\"];\n    }\n  }\n\n  return tagBuilder(formName, componentStyle);\n}\n\n_c = AuthorizationText;\n\nfunction CardText(componentsState) {\n  const componentStyle = componentsState[\"Card\"];\n  const componentText = componentStyle.text ? '\\n\\t' + componentStyle.text : '';\n  const Button = componentStyle.btn || \"Classic\";\n  const replaceParams = [\"src\"];\n  const additionalProp = [\"src\"];\n  const propsText = propsBuilder(componentStyle, replaceParams, additionalProp);\n  const buttonCode = tagBuilder(Button, componentsState[Button]);\n  return `<Card${propsText}>${componentText}\\n\\t${buttonCode}\\n</Card>`;\n}\n\n_c2 = CardText;\n\nfunction EntryText(componentsState) {\n  const componentStyle = componentsState[\"Entry\"];\n  const componentText = componentStyle.text ? '\\n\\t' + componentStyle.text : '';\n  const Button = componentStyle.btn || \"Classic\";\n  const typeForm = componentStyle.type || \"Email\";\n  const replaceParams = [\"btn\", \"type\", \"sync\"];\n  const propsText = propsBuilder(componentStyle, replaceParams);\n  const isSimple = false;\n  const Login = AuthorizationText(typeForm, componentsState, isSimple); // второе поле в Entry всегда является паролем, поэтому оно отличается только типом\n\n  const Pass = AuthorizationText(\"Password\", componentsState, isSimple);\n  const buttonCode = tagBuilder(Button, componentsState[Button]);\n  return `<Entry${propsText}>${componentText}\\n\\t${Login}\\n\\t${Pass}\\n\\t${buttonCode}\\n</Entry>`;\n}\n\n_c3 = EntryText;\n\nfunction BankCardText(componentsState) {\n  const componentStyle = componentsState[\"BankCard\"];\n  const componentText = componentStyle.text ? '\\n\\t' + componentStyle.text : '';\n  const propsText = propsBuilder(componentStyle);\n  const CardNumber = CardForm(componentsState[\"Data\"], \"Card Number\", \"cardNumber\");\n  const Month = CardForm(componentsState[\"Data\"], \"MM\", \"period\");\n  const Year = CardForm(componentsState[\"Data\"], \"YY\", \"period\");\n  const CVV = CardForm(componentsState[\"Data\"], \"CVV\", \"code\");\n  return `<BankCard${propsText}>${componentText}\\n\\t${CardNumber}\\n\\t${Month}\\n\\t${Year}\\n\\t${CVV}\\n</BankCard>`;\n} // CardForm формирует код для полей банковской карточки\n\n\n_c4 = BankCardText;\n\nfunction CardForm(componentStyle, placeholder, formType) {\n  const replaceParams = [\"mask\"];\n  let propsText = propsBuilder(componentStyle, replaceParams); // Добавляем нужную маску\n\n  if (formType === \"cardNumber\") {\n    propsText = ' mask=\"9999-9999-9999-9999\"' + propsText;\n  } else if (formType === \"period\") {\n    propsText = ' mask=\"99\"' + propsText;\n  } else if (formType === \"code\") {\n    propsText = ' mask=\"999\"';\n  }\n\n  return `<Data${propsText}>${placeholder}</Data>`;\n}\n\n_c5 = CardForm;\n\nfunction tagBuilder(componentName, componentStyle, additionalProp, replaceParams) {\n  const propsText = propsBuilder(componentStyle, replaceParams, additionalProp);\n  const componentText = componentStyle.text;\n\n  if (componentText === '' || componentText === undefined) {\n    return `<${componentName}${propsText}/>`;\n  } else {\n    return `<${componentName}${propsText}>${componentText}</${componentName}>`;\n  }\n}\n\nfunction propsBuilder(componentStyle, replaceParams, additionalProps) {\n  const styleReader = new StyleReader(componentStyle);\n  let className = styleReader.className;\n\n  if (replaceParams !== undefined) {\n    for (let param of replaceParams) {\n      let paramValue = componentStyle[param];\n      className = className.replace(`${param}-${paramValue}`, '').trim();\n    }\n  }\n\n  let additionalText = '';\n\n  if (additionalProps !== undefined) {\n    for (let prop of additionalProps) {\n      let propValue = componentStyle[prop];\n\n      if (propValue !== undefined) {\n        additionalText += ` ${prop}=\"${propValue}\"`;\n      }\n    }\n  }\n\n  if (className === '') {\n    return additionalText + '';\n  } else {\n    return additionalText + ` className=\"${className}\"`;\n  }\n}\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AuthorizationText\");\n$RefreshReg$(_c2, \"CardText\");\n$RefreshReg$(_c3, \"EntryText\");\n$RefreshReg$(_c4, \"BankCardText\");\n$RefreshReg$(_c5, \"CardForm\");","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/utils/textBuilder.js"],"names":["StyleReader","textBuilder","componentName","componentsState","text","buttons","authorization","includes","tagBuilder","isSimple","AuthorizationText","replaceParams","additionalProp","CardText","EntryText","BankCardText","formName","componentStyle","sync","typeForm","type","componentText","Button","btn","propsText","propsBuilder","buttonCode","Login","Pass","CardNumber","CardForm","Month","Year","CVV","placeholder","formType","undefined","additionalProps","styleReader","className","param","paramValue","replace","trim","additionalText","prop","propValue"],"mappings":"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","sourcesContent":["import StyleReader from \"./StyleReader\";\n\n// функция textBuilder строит текст для вывода на сайте в разделе \"Export\"\nexport default function textBuilder(componentName, componentsState) {\n    let text;\n\n    const buttons = [\"Classic\", \"Outline\", \"Waves\"];\n    const authorization = [\"Login\", \"Email\", \"Telephone\", \"Password\"];\n\n    if (buttons.includes(componentName)) {\n        text = tagBuilder(componentName, componentsState[componentName]);\n    } else if (authorization.includes(componentName)) {\n        const isSimple = true;\n        text = AuthorizationText(componentName, componentsState, isSimple);\n    } else if (componentName === \"Data\") {\n        const replaceParams = [\"mask\"];\n        const additionalProp = [\"mask\"];\n        text = tagBuilder(\"Data\", componentsState[\"Data\"], additionalProp, replaceParams);\n    } else if (componentName === \"Card\") {\n        text = CardText(componentsState);\n    } else if (componentName === \"Entry\") {\n        text = EntryText(componentsState);\n    } else if (componentName === \"BankCard\") {\n        text = BankCardText(componentsState);\n    }\n\n    return text;\n}\n\n\nfunction AuthorizationText(formName, componentsState, isSimple) {\n    let componentStyle = componentsState[formName];\n\n    // делаем синхранизацию стилей для форм из Entry\n    if (!isSimple) {\n        const sync = componentsState[\"Entry\"].sync;\n        if (sync === \"Login\") {\n            // берём стили выбранной формы из состояния Entry\n            const typeForm = componentsState[\"Entry\"].type || \"Email\";\n            componentStyle = componentsState[typeForm];\n        } else if (sync === \"Pass\") {\n            // синхронизируем стили с формой \"Password\"\n            componentStyle = componentsState[\"Password\"];\n        }\n    }\n\n    return tagBuilder(formName, componentStyle);\n}\n\n\nfunction CardText(componentsState) {\n    const componentStyle = componentsState[\"Card\"];\n    const componentText = componentStyle.text ? '\\n\\t' + componentStyle.text : '';\n\n    const Button = componentStyle.btn || \"Classic\";\n\n    const replaceParams = [\"src\"];\n    const additionalProp = [\"src\"];\n    const propsText = propsBuilder(componentStyle, replaceParams, additionalProp);\n\n    const buttonCode = tagBuilder(Button, componentsState[Button]);\n\n    return `<Card${propsText}>${componentText}\\n\\t${buttonCode}\\n</Card>`;\n}\n\n\nfunction EntryText(componentsState) {\n    const componentStyle = componentsState[\"Entry\"];\n    const componentText = componentStyle.text ? '\\n\\t' + componentStyle.text : '';\n\n    const Button = componentStyle.btn || \"Classic\";\n    const typeForm = componentStyle.type || \"Email\";\n\n    const replaceParams = [\"btn\", \"type\", \"sync\"];\n    const propsText = propsBuilder(componentStyle, replaceParams);\n\n    const isSimple = false;\n    const Login = AuthorizationText(typeForm, componentsState, isSimple);\n    // второе поле в Entry всегда является паролем, поэтому оно отличается только типом\n    const Pass = AuthorizationText(\"Password\", componentsState, isSimple);\n\n    const buttonCode = tagBuilder(Button, componentsState[Button]);\n\n    return `<Entry${propsText}>${componentText}\\n\\t${Login}\\n\\t${Pass}\\n\\t${buttonCode}\\n</Entry>`;\n}\n\n\nfunction BankCardText(componentsState) {\n    const componentStyle = componentsState[\"BankCard\"];\n    const componentText = componentStyle.text ? '\\n\\t' + componentStyle.text : '';\n\n    const propsText = propsBuilder(componentStyle);\n\n    const CardNumber = CardForm(componentsState[\"Data\"], \"Card Number\", \"cardNumber\");\n    const Month = CardForm(componentsState[\"Data\"], \"MM\", \"period\");\n    const Year = CardForm(componentsState[\"Data\"], \"YY\", \"period\");\n    const CVV = CardForm(componentsState[\"Data\"], \"CVV\", \"code\");\n\n    return `<BankCard${propsText}>${componentText}\\n\\t${CardNumber}\\n\\t${Month}\\n\\t${Year}\\n\\t${CVV}\\n</BankCard>`\n}\n\n// CardForm формирует код для полей банковской карточки\nfunction CardForm(componentStyle, placeholder, formType) {\n    const replaceParams = [\"mask\"];\n    let propsText = propsBuilder(componentStyle, replaceParams);\n\n    // Добавляем нужную маску\n    if (formType === \"cardNumber\") {\n        propsText = ' mask=\"9999-9999-9999-9999\"' + propsText;\n    } else if (formType === \"period\") {\n        propsText = ' mask=\"99\"' + propsText;\n    } else if (formType === \"code\") {\n        propsText = ' mask=\"999\"';\n    }\n\n    return `<Data${propsText}>${placeholder}</Data>`\n}\n\n\nfunction tagBuilder(componentName, componentStyle, additionalProp, replaceParams) {\n\n    const propsText = propsBuilder(componentStyle, replaceParams, additionalProp);\n    const componentText = componentStyle.text;\n\n    if (componentText === '' || componentText === undefined) {\n        return `<${componentName}${propsText}/>`;\n    } else {\n        return `<${componentName}${propsText}>${componentText}</${componentName}>`;\n    }\n}\n\n\nfunction propsBuilder(componentStyle, replaceParams, additionalProps) {\n    const styleReader = new StyleReader(componentStyle);\n    let className = styleReader.className;\n\n    if (replaceParams !== undefined) {\n        for (let param of replaceParams) {\n            let paramValue = componentStyle[param];\n            className = className.replace(`${param}-${paramValue}`, '').trim();\n        }\n    }\n\n    let additionalText = '';\n    if (additionalProps !== undefined) {\n        for (let prop of additionalProps) {\n            let propValue = componentStyle[prop];\n            if (propValue !== undefined) {\n                additionalText += ` ${prop}=\"${propValue}\"`;\n            }\n        }\n    }\n\n    if (className === '') {\n        return additionalText + '';\n    } else {\n        return additionalText + ` className=\"${className}\"`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
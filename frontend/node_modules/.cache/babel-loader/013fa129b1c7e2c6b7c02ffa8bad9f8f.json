{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/Tabs/Tabs.js\";\nimport React, { Component } from 'react';\nimport '../../../assets/css/ControlCenter/Tabs.scss';\nimport TabItem from \"./TabItem\";\nimport ThemeContext from \"../../ThemeControl/ThemeContext\";\nimport { connect } from \"react-redux\"; // Tabs представляет из себя панель вкладок\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Tabs extends Component {\n  render() {\n    // получает в виде пропсов метод-колбэк, позволяющий переключить вкладку, и название текущей вкладки\n    const {\n      switchTab,\n      currentTabName,\n      componentName\n    } = this.props;\n    const themeContext = this.context.theme; // список доступных вкладок\n\n    let btnNames;\n\n    if (componentName === \"Outline\") {\n      btnNames = [\"Style\", \"Export\", \"Info\"];\n    } else {\n      btnNames = [\"Style\", \"Export\"];\n    } // на основе списка вкладок создается массив компонентов, являющихся отдельными вкладками (TabItem)\n\n\n    const tabItems = btnNames.map((name, index) => {\n      return /*#__PURE__*/_jsxDEV(TabItem, {\n        tabItemName: name,\n        switchTab: switchTab,\n        currentTabName: currentTabName\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `tabs tabs_${themeContext}`,\n      children: tabItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  } // передача контекста текущей UI-темы\n\n\n}\n\nTabs.contextType = ThemeContext;\n\nconst mapStateToProps = state => {\n  return {\n    componentName: state.currentComponent.componentName\n  };\n};\n\nexport default connect(mapStateToProps)(Tabs);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/Tabs/Tabs.js"],"names":["React","Component","TabItem","ThemeContext","connect","Tabs","render","switchTab","currentTabName","componentName","props","themeContext","context","theme","btnNames","tabItems","map","name","index","contextType","mapStateToProps","state","currentComponent"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,6CAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;;;;AACA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAEzBK,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,cAAb;AAA6BC,MAAAA;AAA7B,QAA+C,KAAKC,KAA1D;AACA,UAAMC,YAAY,GAAG,KAAKC,OAAL,CAAaC,KAAlC,CAHK,CAKL;;AACA,QAAIC,QAAJ;;AACA,QAAIL,aAAa,KAAK,SAAtB,EAAiC;AAC7BK,MAAAA,QAAQ,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,MAApB,CAAX;AACH,KAFD,MAEO;AACHA,MAAAA,QAAQ,GAAG,CAAC,OAAD,EAAU,QAAV,CAAX;AACH,KAXI,CAaL;;;AACA,UAAMC,QAAQ,GAAGD,QAAQ,CAACE,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3C,0BAAO,QAAC,OAAD;AAAS,QAAA,WAAW,EAAED,IAAtB;AACS,QAAA,SAAS,EAAEV,SADpB;AAES,QAAA,cAAc,EAAEC;AAFzB,SAGcU,KAHd;AAAA;AAAA;AAAA;AAAA,cAAP;AAIH,KALgB,CAAjB;AAOA,wBACI;AAAK,MAAA,SAAS,EAAG,aAAYP,YAAa,EAA1C;AAAA,gBACKI;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GA5BwB,CA8BzB;;;AA9ByB;;AAAvBV,I,CA+BKc,W,GAAchB,Y;;AAGzB,MAAMiB,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHZ,IAAAA,aAAa,EAAEY,KAAK,CAACC,gBAAN,CAAuBb;AADnC,GAAP;AAGH,CAJD;;AAMA,eAAeL,OAAO,CAACgB,eAAD,CAAP,CAAyBf,IAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport '../../../assets/css/ControlCenter/Tabs.scss';\nimport TabItem from \"./TabItem\";\nimport ThemeContext from \"../../ThemeControl/ThemeContext\";\nimport {connect} from \"react-redux\";\n\n// Tabs представляет из себя панель вкладок\nclass Tabs extends Component {\n\n    render() {\n        // получает в виде пропсов метод-колбэк, позволяющий переключить вкладку, и название текущей вкладки\n        const { switchTab, currentTabName, componentName } = this.props;\n        const themeContext = this.context.theme;\n\n        // список доступных вкладок\n        let btnNames;\n        if (componentName === \"Outline\") {\n            btnNames = [\"Style\", \"Export\", \"Info\"];\n        } else {\n            btnNames = [\"Style\", \"Export\"];\n        }\n\n        // на основе списка вкладок создается массив компонентов, являющихся отдельными вкладками (TabItem)\n        const tabItems = btnNames.map((name, index) => {\n            return <TabItem tabItemName={name}\n                            switchTab={switchTab}\n                            currentTabName={currentTabName}\n                            key={index}/>\n        });\n\n        return(\n            <div className={`tabs tabs_${themeContext}`}>\n                {tabItems}\n            </div>\n        )\n    }\n\n    // передача контекста текущей UI-темы\n    static contextType = ThemeContext;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        componentName: state.currentComponent.componentName\n    }\n}\n\nexport default connect(mapStateToProps)(Tabs);\n"]},"metadata":{},"sourceType":"module"}
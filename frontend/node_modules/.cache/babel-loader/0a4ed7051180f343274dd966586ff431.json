{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/TextForm.js\";\nimport React, { Component } from 'react';\nimport { setComponentState } from \"../../../../../store/libraryState/actions\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TextForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      value: ''\n    };\n\n    this.handleChange = event => {\n      const {\n        setComponentState,\n        styleType,\n        componentName,\n        isUserComponent\n      } = this.props;\n      const value = event.target.value;\n\n      if (isUserComponent) {\n        console.log(\"user component\");\n      } else {\n        setComponentState(componentName, styleType, value);\n      }\n\n      this.setState({\n        value: value\n      });\n    };\n  }\n\n  // метод жизненного цикла, позволяющий синхронизировать состояние формы со стилем компонента\n  static getDerivedStateFromProps(props, state) {\n    const {\n      componentName,\n      styleType,\n      isUserComponent,\n      userComponent\n    } = props;\n    let componentsState, componentStyle;\n\n    if (!isUserComponent) {\n      componentsState = props.componentsState;\n      componentStyle = componentsState && componentsState[componentName];\n    } else {\n      componentsState = props.userLibrary;\n      componentStyle = componentsState && componentsState[userComponent];\n    } // синхронизация значения формы и стиля компонента\n\n\n    if (componentStyle[styleType] !== state.value) {\n      return {\n        value: componentStyle[styleType]\n      };\n    } // в ином случае оставить без изменений\n\n\n    return null;\n  }\n\n  render() {\n    const {\n      label\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form__label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__wrapper form__wrapper_long\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form__textarea\",\n          value: this.state.value,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  } // метод передает изменения с помощью функции-колбэка\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    componentName: state.currentComponent.componentName,\n    componentsState: state.libraryState,\n    userLibrary: state.userLibrary,\n    isUserComponent: state.currentComponent.isUserComponent,\n    userComponent: state.currentComponent.userComponentName\n  };\n};\n\nconst mapDispatchToProps = {\n  setComponentState\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TextForm);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/TextForm.js"],"names":["React","Component","setComponentState","connect","TextForm","state","value","handleChange","event","styleType","componentName","isUserComponent","props","target","console","log","setState","getDerivedStateFromProps","userComponent","componentsState","componentStyle","userLibrary","render","label","mapStateToProps","currentComponent","libraryState","userComponentName","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {setComponentState} from \"../../../../../store/libraryState/actions\";\nimport {connect} from \"react-redux\";\n\nclass TextForm extends Component {\n    state = {\n        value: '',\n    }\n\n    // метод жизненного цикла, позволяющий синхронизировать состояние формы со стилем компонента\n    static getDerivedStateFromProps(props, state) {\n        const {componentName, styleType, isUserComponent, userComponent} = props;\n        let componentsState, componentStyle;\n\n        if (!isUserComponent) {\n            componentsState = props.componentsState;\n            componentStyle = componentsState && componentsState[componentName];\n        } else {\n            componentsState = props.userLibrary;\n            componentStyle = componentsState && componentsState[userComponent];\n        }\n\n        // синхронизация значения формы и стиля компонента\n        if (componentStyle[styleType] !== state.value) {\n            return { value: componentStyle[styleType] }\n        }\n\n        // в ином случае оставить без изменений\n        return null;\n    }\n\n    render () {\n        const {label} = this.props;\n\n        return (\n            <form className=\"form\">\n                <label className=\"form__label\">{label}</label>\n                <div className=\"form__wrapper form__wrapper_long\">\n                    <textarea className=\"form__textarea\"\n                              value={this.state.value}\n                              onChange={this.handleChange}>\n                    </textarea>\n                </div>\n            </form>\n        )\n    }\n\n    // метод передает изменения с помощью функции-колбэка\n    handleChange = (event) => {\n        const {setComponentState, styleType, componentName, isUserComponent} = this.props;\n        const value = event.target.value;\n\n        if (isUserComponent) {\n            console.log(\"user component\");\n        } else {\n            setComponentState(componentName, styleType, value);\n        }\n\n        this.setState({\n            value: value,\n        })\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        componentName: state.currentComponent.componentName,\n        componentsState: state.libraryState,\n        userLibrary: state.userLibrary,\n        isUserComponent: state.currentComponent.isUserComponent,\n        userComponent: state.currentComponent.userComponentName,\n    }\n}\n\nconst mapDispatchToProps = {\n    setComponentState\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TextForm);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export function maskForData(e, pattern) {\n  let input = e.target,\n      selectionStart = input.selectionStart;\n  input.maxLength = pattern.length;\n  let absoluteValue = getAbsoluteValue(input.value);\n\n  if (!absoluteValue) {\n    return input.value = \"\";\n  }\n\n  if (input.value.length !== selectionStart) {\n    if (e.data && /\\D/g.test(e.data)) {\n      input.value = absoluteValue;\n    }\n\n    return;\n  }\n\n  maskMatcher(input, pattern);\n}\n\nfunction maskMatcher(input, pattern) {\n  const currentLength = input.value.length;\n  const previousStroke = input.value.slice(0, currentLength - 1);\n  const newSymbol = input.value[currentLength - 1];\n\n  switch (pattern[currentLength - 1]) {\n    case \"9\":\n      // the value belongs to 0-9\n      input.value = previousStroke + numberChecker(newSymbol);\n      break;\n\n    case \"a\":\n      // the value belongs to A-Z, a-z\n      input.value = previousStroke + letterChecker(newSymbol);\n      break;\n\n    case \"*\":\n      // the value belongs to 0-9, A-Z, a-z\n      input.value = previousStroke + getAbsoluteValue(newSymbol);\n      break;\n\n    default:\n      // splitter\n      input.value = previousStroke + pattern[currentLength - 1] + newSymbol;\n      maskMatcher(input, pattern);\n      break;\n  }\n}\n\nfunction getAbsoluteValue(value) {\n  return value.replace(/[\\W_]/g, \"\");\n}\n\nfunction numberChecker(sym) {\n  return sym.replace(/\\D/, \"\");\n}\n\nfunction letterChecker(sym) {\n  return sym.replace(/[\\d\\W_]/, \"\");\n}\n\nexport function dataKeyDown(e, mask) {\n  let input = e.target;\n\n  if (e.keyCode === 8) {\n    const currentLength = input.value.length;\n\n    if (currentLength > 1) {\n      const maskSymbol = mask[currentLength - 2];\n\n      if (![\"9\", \"a\", \"*\"].includes(maskSymbol)) {\n        input.value = input.value.slice(0, currentLength - 1);\n        dataKeyDown(e, mask);\n      }\n    }\n  }\n}\nexport function dataPaste(e, mask) {\n  let pasted = e.clipboardData || window.clipboardData,\n      input = e.target;\n\n  if (pasted) {\n    let pastedText = pasted.getData(\"Text\");\n\n    for (let symbol of pastedText) {\n      input.value += symbol;\n      maskForData(e, mask);\n    }\n  }\n}","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/Library/Forms/Data/mask.js"],"names":["maskForData","e","pattern","input","target","selectionStart","maxLength","length","absoluteValue","getAbsoluteValue","value","data","test","maskMatcher","currentLength","previousStroke","slice","newSymbol","numberChecker","letterChecker","replace","sym","dataKeyDown","mask","keyCode","maskSymbol","includes","dataPaste","pasted","clipboardData","window","pastedText","getData","symbol"],"mappings":"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","sourcesContent":["export function maskForData(e, pattern) {\n    let input = e.target,\n        selectionStart = input.selectionStart;\n\n    input.maxLength = pattern.length;\n\n    let absoluteValue = getAbsoluteValue(input.value);\n\n    if (!absoluteValue) {\n        return input.value = \"\";\n    }\n\n    if (input.value.length !== selectionStart) {\n        if (e.data && /\\D/g.test(e.data)) {\n            input.value = absoluteValue;\n        }\n        return;\n    }\n\n    maskMatcher(input, pattern);\n}\n\nfunction maskMatcher(input, pattern) {\n    const currentLength = input.value.length;\n    const previousStroke = input.value.slice(0, currentLength-1);\n    const newSymbol = input.value[currentLength-1];\n\n    switch (pattern[currentLength-1]) {\n        case \"9\":\n            // the value belongs to 0-9\n            input.value = previousStroke + numberChecker(newSymbol);\n            break;\n        case \"a\":\n            // the value belongs to A-Z, a-z\n            input.value = previousStroke + letterChecker(newSymbol);\n            break;\n        case \"*\":\n            // the value belongs to 0-9, A-Z, a-z\n            input.value = previousStroke + getAbsoluteValue(newSymbol);\n            break;\n        default:\n            // splitter\n            input.value = previousStroke + pattern[currentLength-1] + newSymbol;\n            maskMatcher(input, pattern);\n            break;\n    }\n}\n\nfunction getAbsoluteValue(value) {\n    return value.replace(/[\\W_]/g, \"\");\n}\n\nfunction numberChecker(sym) {\n    return sym.replace(/\\D/, \"\");\n}\n\nfunction letterChecker(sym) {\n    return sym.replace(/[\\d\\W_]/, \"\");\n}\n\n\nexport function dataKeyDown(e, mask) {\n    let input = e.target;\n    if (e.keyCode === 8) {\n        const currentLength = input.value.length;\n        if (currentLength > 1) {\n            const maskSymbol = mask[currentLength-2]\n\n            if (![\"9\", \"a\", \"*\"].includes(maskSymbol)) {\n                input.value = input.value.slice(0, currentLength-1);\n                dataKeyDown(e, mask);\n            }\n        }\n    }\n}\n\n\nexport function dataPaste(e, mask) {\n    let pasted = e.clipboardData || window.clipboardData,\n        input = e.target;\n\n    if (pasted) {\n        let pastedText = pasted.getData(\"Text\");\n        for (let symbol of pastedText) {\n            input.value += symbol;\n            maskForData(e, mask);\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}
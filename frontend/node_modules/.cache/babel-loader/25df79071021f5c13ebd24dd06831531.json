{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/NumberForm.js\";\nimport React, { Component } from 'react';\nimport { setComponentState } from \"../../../../../store/libraryState/actions\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NumberForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: ''\n    };\n\n    this.handleChange = event => {\n      const {\n        setComponentState,\n        componentName,\n        styleType\n      } = this.props;\n      const value = event.target.value;\n      setComponentState(componentName, styleType, value);\n      this.setState({\n        value: value\n      });\n    };\n  }\n\n  // метод жизненного цикла, позволяющий синхронизировать состояние формы со стилем компонента\n  static getDerivedStateFromProps(props, state) {\n    const {\n      componentsState,\n      componentName,\n      styleType\n    } = props;\n    const componentStyle = componentsState[componentName]; // синхронизация значения формы и стиля компонента\n\n    if (componentStyle[styleType] !== state.value) {\n      return {\n        value: componentStyle[styleType]\n      };\n    } // в ином случае оставить без изменений\n\n\n    return null;\n  }\n\n  render() {\n    const {\n      label,\n      styleType\n    } = this.props;\n    let minValue,\n        placeholderValue = 0; // минимальное значение ширины компонента должно быть не меньше 80px\n\n    if (styleType === 'wd') {\n      placeholderValue = 80;\n      minValue = 80;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form__label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form__number\",\n          type: \"number\",\n          min: minValue,\n          placeholder: placeholderValue,\n          value: this.state.value,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  } // метод передает изменения с помощью функции-колбэка\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    componentName: state.currentComponent.componentName,\n    componentsState: state.libraryState\n  };\n};\n\nconst mapDispatchToProps = {\n  setComponentState\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NumberForm);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/NumberForm.js"],"names":["React","Component","setComponentState","connect","NumberForm","state","value","handleChange","event","componentName","styleType","props","target","setState","getDerivedStateFromProps","componentsState","componentStyle","render","label","minValue","placeholderValue","mapStateToProps","currentComponent","libraryState","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,iBAAR,QAAgC,2CAAhC;AACA,SAAQC,OAAR,QAAsB,aAAtB;;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAC/BI,KAD+B,GACvB;AACJC,MAAAA,KAAK,EAAE;AADH,KADuB;;AAAA,SA8C/BC,YA9C+B,GA8CfC,KAAD,IAAW;AACtB,YAAM;AAACN,QAAAA,iBAAD;AAAoBO,QAAAA,aAApB;AAAmCC,QAAAA;AAAnC,UAAgD,KAAKC,KAA3D;AACA,YAAML,KAAK,GAAGE,KAAK,CAACI,MAAN,CAAaN,KAA3B;AACAJ,MAAAA,iBAAiB,CAACO,aAAD,EAAgBC,SAAhB,EAA2BJ,KAA3B,CAAjB;AAEA,WAAKO,QAAL,CAAc;AACVP,QAAAA,KAAK,EAAEA;AADG,OAAd;AAGH,KAtD8B;AAAA;;AAK/B;AAC+B,SAAxBQ,wBAAwB,CAACH,KAAD,EAAQN,KAAR,EAAe;AAC1C,UAAM;AAACU,MAAAA,eAAD;AAAkBN,MAAAA,aAAlB;AAAiCC,MAAAA;AAAjC,QAA8CC,KAApD;AACA,UAAMK,cAAc,GAAGD,eAAe,CAACN,aAAD,CAAtC,CAF0C,CAI1C;;AACA,QAAIO,cAAc,CAACN,SAAD,CAAd,KAA8BL,KAAK,CAACC,KAAxC,EAA+C;AAC3C,aAAO;AAAEA,QAAAA,KAAK,EAAEU,cAAc,CAACN,SAAD;AAAvB,OAAP;AACH,KAPyC,CAS1C;;;AACA,WAAO,IAAP;AACH;;AAEDO,EAAAA,MAAM,GAAI;AACN,UAAM;AAACC,MAAAA,KAAD;AAAQR,MAAAA;AAAR,QAAqB,KAAKC,KAAhC;AACA,QAAIQ,QAAJ;AAAA,QAAcC,gBAAgB,GAAG,CAAjC,CAFM,CAIN;;AACA,QAAIV,SAAS,KAAK,IAAlB,EAAwB;AACpBU,MAAAA,gBAAgB,GAAG,EAAnB;AACAD,MAAAA,QAAQ,GAAG,EAAX;AACH;;AAED,wBACI;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,8BACI;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA,kBAAgCD;AAAhC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACI;AAAO,UAAA,SAAS,EAAC,cAAjB;AACO,UAAA,IAAI,EAAC,QADZ;AAEO,UAAA,GAAG,EAAEC,QAFZ;AAGO,UAAA,WAAW,EAAEC,gBAHpB;AAIO,UAAA,KAAK,EAAE,KAAKf,KAAL,CAAWC,KAJzB;AAKO,UAAA,QAAQ,EAAE,KAAKC;AALtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH,GA3C8B,CA6C/B;;;AA7C+B;;AAyDnC,MAAMc,eAAe,GAAIhB,KAAD,IAAW;AAC/B,SAAO;AACHI,IAAAA,aAAa,EAAEJ,KAAK,CAACiB,gBAAN,CAAuBb,aADnC;AAEHM,IAAAA,eAAe,EAAEV,KAAK,CAACkB;AAFpB,GAAP;AAIH,CALD;;AAOA,MAAMC,kBAAkB,GAAG;AACvBtB,EAAAA;AADuB,CAA3B;AAIA,eAAeC,OAAO,CAACkB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpB,UAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {setComponentState} from \"../../../../../store/libraryState/actions\";\nimport {connect} from \"react-redux\";\n\nclass NumberForm extends Component {\n    state = {\n        value: '',\n    }\n\n    // метод жизненного цикла, позволяющий синхронизировать состояние формы со стилем компонента\n    static getDerivedStateFromProps(props, state) {\n        const {componentsState, componentName, styleType} = props;\n        const componentStyle = componentsState[componentName];\n\n        // синхронизация значения формы и стиля компонента\n        if (componentStyle[styleType] !== state.value) {\n            return { value: componentStyle[styleType] }\n        }\n\n        // в ином случае оставить без изменений\n        return null;\n    }\n\n    render () {\n        const {label, styleType} = this.props;\n        let minValue, placeholderValue = 0;\n\n        // минимальное значение ширины компонента должно быть не меньше 80px\n        if (styleType === 'wd') {\n            placeholderValue = 80;\n            minValue = 80;\n        }\n\n        return (\n            <form className=\"form\">\n                <label className=\"form__label\">{label}</label>\n                <div className=\"form__wrapper\">\n                    <input className=\"form__number\"\n                           type=\"number\"\n                           min={minValue}\n                           placeholder={placeholderValue}\n                           value={this.state.value}\n                           onChange={this.handleChange}>\n                    </input>\n                </div>\n            </form>\n        )\n    }\n\n    // метод передает изменения с помощью функции-колбэка\n    handleChange = (event) => {\n        const {setComponentState, componentName, styleType} = this.props;\n        const value = event.target.value;\n        setComponentState(componentName, styleType, value);\n\n        this.setState({\n            value: value,\n        });\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        componentName: state.currentComponent.componentName,\n        componentsState: state.libraryState\n    }\n}\n\nconst mapDispatchToProps = {\n    setComponentState\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NumberForm);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/NumberForm.js\";\nimport React, { Component } from 'react';\nimport { setComponentState } from \"../../../../../store/libraryState/actions\";\nimport { connect } from \"react-redux\";\nimport { setUserComponentStyle } from \"../../../../../store/userLibrary/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NumberForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      value: ''\n    };\n\n    this.handleChange = event => {\n      const {\n        setComponentState,\n        setUserComponentStyle,\n        styleType,\n        componentName,\n        isUserComponent,\n        userComponentName\n      } = this.props;\n      const value = event.target.value;\n\n      if (isUserComponent) {\n        setUserComponentStyle(userComponentName, styleType, value);\n      } else {\n        setComponentState(componentName, styleType, value);\n      }\n\n      this.setState({\n        value: value\n      });\n    };\n  }\n\n  // метод жизненного цикла, позволяющий синхронизировать состояние формы со стилем компонента\n  static getDerivedStateFromProps(props, state) {\n    const {\n      componentStyles,\n      styleType\n    } = props; // синхронизация значения формы и стиля компонента\n\n    if (componentStyles[styleType] !== state.value) {\n      return {\n        value: componentStyles[styleType]\n      };\n    } // в ином случае оставить без изменений\n\n\n    return null;\n  }\n\n  render() {\n    const {\n      label,\n      styleType\n    } = this.props;\n    let minValue,\n        placeholderValue = 0; // минимальное значение ширины компонента должно быть не меньше 80px\n\n    if (styleType === 'wd') {\n      placeholderValue = 80;\n      minValue = 80;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form__label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form__number\",\n          type: \"number\",\n          min: minValue,\n          placeholder: placeholderValue,\n          value: this.state.value,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  } // метод передает изменения с помощью функции-колбэка\n\n\n}\n\nconst mapStateToProps = state => {\n  const isUserComponent = state.currentComponent.isUserComponent;\n  const componentName = state.currentComponent.componentName;\n  const userComponentName = state.currentComponent.userComponentName;\n  const componentStyles = isUserComponent ? state.userLibrary[userComponentName] : state.libraryState[componentName];\n  return {\n    componentStyles,\n    componentName,\n    isUserComponent,\n    userComponentName\n  };\n};\n\nconst mapDispatchToProps = {\n  setComponentState,\n  setUserComponentStyle\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NumberForm);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/NumberForm.js"],"names":["React","Component","setComponentState","connect","setUserComponentStyle","NumberForm","state","value","handleChange","event","styleType","componentName","isUserComponent","userComponentName","props","target","setState","getDerivedStateFromProps","componentStyles","render","label","minValue","placeholderValue","mapStateToProps","currentComponent","userLibrary","libraryState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {setComponentState} from \"../../../../../store/libraryState/actions\";\nimport {connect} from \"react-redux\";\nimport {setUserComponentStyle} from \"../../../../../store/userLibrary/actions\";\n\nclass NumberForm extends Component {\n    state = {\n        value: '',\n    }\n\n    // метод жизненного цикла, позволяющий синхронизировать состояние формы со стилем компонента\n    static getDerivedStateFromProps(props, state) {\n        const {componentStyles, styleType} = props;\n\n        // синхронизация значения формы и стиля компонента\n        if (componentStyles[styleType] !== state.value) {\n            return { value: componentStyles[styleType] }\n        }\n\n        // в ином случае оставить без изменений\n        return null;\n    }\n\n    render () {\n        const {label, styleType} = this.props;\n        let minValue, placeholderValue = 0;\n\n        // минимальное значение ширины компонента должно быть не меньше 80px\n        if (styleType === 'wd') {\n            placeholderValue = 80;\n            minValue = 80;\n        }\n\n        return (\n            <form className=\"form\">\n                <label className=\"form__label\">{label}</label>\n                <div className=\"form__wrapper\">\n                    <input className=\"form__number\"\n                           type=\"number\"\n                           min={minValue}\n                           placeholder={placeholderValue}\n                           value={this.state.value}\n                           onChange={this.handleChange}>\n                    </input>\n                </div>\n            </form>\n        )\n    }\n\n    // метод передает изменения с помощью функции-колбэка\n    handleChange = (event) => {\n        const {setComponentState, setUserComponentStyle, styleType, componentName, isUserComponent, userComponentName} = this.props;\n        const value = event.target.value;\n\n        if (isUserComponent) {\n            setUserComponentStyle(userComponentName, styleType, value);\n        } else {\n            setComponentState(componentName, styleType, value);\n        }\n\n        this.setState({\n            value: value,\n        })\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const isUserComponent = state.currentComponent.isUserComponent;\n    const componentName = state.currentComponent.componentName;\n    const userComponentName = state.currentComponent.userComponentName;\n    const componentStyles = isUserComponent ? state.userLibrary[userComponentName] : state.libraryState[componentName];\n\n    return {\n        componentStyles,\n        componentName,\n        isUserComponent,\n        userComponentName,\n    }\n}\n\nconst mapDispatchToProps = {\n    setComponentState,\n    setUserComponentStyle,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NumberForm);\n"]},"metadata":{},"sourceType":"module"}
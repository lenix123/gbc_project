{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/DropdownForm.js\";\nimport React, { Component } from 'react';\nimport { setComponentState } from \"../../../../../store/libraryState/actions\";\nimport { connect } from \"react-redux\"; // форма - выпадающий список\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DropdownForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: 'Regular'\n    };\n\n    this.handleChange = event => {\n      const {\n        setComponentState,\n        componentName,\n        styleType\n      } = this.props;\n      setComponentState(componentName, styleType, event.target.value);\n      this.setState({\n        value: event.target.value\n      });\n    };\n  }\n\n  // метод жизненного цикла, позволяющий сбросить значение формы,\n  // а также синхронизировать состояние формы со стилем компонента\n  static getDerivedStateFromProps(props, state) {\n    const {\n      componentsState,\n      componentName,\n      styleType\n    } = props;\n    const componentStyle = componentsState[componentName]; // если стили были сброшены вручную (resetStyles), то форма примет значения по умолчанию\n\n    if (componentStyle[styleType] === '' && state.value !== 'Regular') {\n      return {\n        value: 'Regular'\n      }; // синхронизация значения формы и стиля компонента\n    } else if (componentStyle[styleType] !== state.value && componentStyle[styleType] !== '') {\n      return {\n        value: componentStyle[styleType]\n      };\n    } // в ином случае оставить без изменений\n\n\n    return null;\n  }\n\n  render() {\n    const {\n      label,\n      elements\n    } = this.props; // массив элементов выпадающего меню\n\n    const optionList = elements.map((element, index) => {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: element,\n        children: element\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 19\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form__label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form__dropdown\",\n          value: this.state.value,\n          onChange: this.handleChange,\n          children: optionList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  } // метод передает изменения с помощью функции-колбэка\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    componentName: state.currentComponent.componentName,\n    componentsState: state.libraryState\n  };\n};\n\nconst mapDispatchToProps = {\n  setComponentState\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(DropdownForm);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/DropdownForm.js"],"names":["React","Component","setComponentState","connect","DropdownForm","state","value","handleChange","event","componentName","styleType","props","target","setState","getDerivedStateFromProps","componentsState","componentStyle","render","label","elements","optionList","map","element","index","mapStateToProps","currentComponent","libraryState","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,iBAAR,QAAgC,2CAAhC;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;;;;AACA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAEjCI,KAFiC,GAEzB;AACJC,MAAAA,KAAK,EAAE;AADH,KAFyB;;AAAA,SA+CjCC,YA/CiC,GA+CjBC,KAAD,IAAW;AACtB,YAAM;AAACN,QAAAA,iBAAD;AAAoBO,QAAAA,aAApB;AAAmCC,QAAAA;AAAnC,UAAgD,KAAKC,KAA3D;AACAT,MAAAA,iBAAiB,CAACO,aAAD,EAAgBC,SAAhB,EAA2BF,KAAK,CAACI,MAAN,CAAaN,KAAxC,CAAjB;AAEA,WAAKO,QAAL,CAAc;AACVP,QAAAA,KAAK,EAAEE,KAAK,CAACI,MAAN,CAAaN;AADV,OAAd;AAGH,KAtDgC;AAAA;;AAMjC;AACA;AAC+B,SAAxBQ,wBAAwB,CAACH,KAAD,EAAQN,KAAR,EAAe;AAC1C,UAAM;AAACU,MAAAA,eAAD;AAAkBN,MAAAA,aAAlB;AAAiCC,MAAAA;AAAjC,QAA8CC,KAApD;AACA,UAAMK,cAAc,GAAGD,eAAe,CAACN,aAAD,CAAtC,CAF0C,CAI1C;;AACA,QAAIO,cAAc,CAACN,SAAD,CAAd,KAA8B,EAA9B,IAAoCL,KAAK,CAACC,KAAN,KAAgB,SAAxD,EAAmE;AAC/D,aAAO;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAP,CAD+D,CAEnE;AACC,KAHD,MAGO,IAAIU,cAAc,CAACN,SAAD,CAAd,KAA8BL,KAAK,CAACC,KAApC,IAA6CU,cAAc,CAACN,SAAD,CAAd,KAA8B,EAA/E,EAAmF;AACtF,aAAO;AAAEJ,QAAAA,KAAK,EAAEU,cAAc,CAACN,SAAD;AAAvB,OAAP;AACH,KAVyC,CAY1C;;;AACA,WAAO,IAAP;AACH;;AAEDO,EAAAA,MAAM,GAAI;AACN,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAoB,KAAKR,KAA/B,CADM,CAGN;;AACA,UAAMS,UAAU,GAAGD,QAAQ,CAACE,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACjD,0BAAO;AAAQ,QAAA,KAAK,EAAED,OAAf;AAAA,kBAAqCA;AAArC,SAA6BC,KAA7B;AAAA;AAAA;AAAA;AAAA,cAAP;AACF,KAFkB,CAAnB;AAIA,wBACI;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,8BACI;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA,kBAAgCL;AAAhC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACI;AAAQ,UAAA,SAAS,EAAC,gBAAlB;AACQ,UAAA,KAAK,EAAE,KAAKb,KAAL,CAAWC,KAD1B;AAEQ,UAAA,QAAQ,EAAE,KAAKC,YAFvB;AAAA,oBAGKa;AAHL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH,GA5CgC,CA8CjC;;;AA9CiC;;AAyDrC,MAAMI,eAAe,GAAInB,KAAD,IAAW;AAC/B,SAAO;AACHI,IAAAA,aAAa,EAAEJ,KAAK,CAACoB,gBAAN,CAAuBhB,aADnC;AAEHM,IAAAA,eAAe,EAAEV,KAAK,CAACqB;AAFpB,GAAP;AAIH,CALD;;AAOA,MAAMC,kBAAkB,GAAG;AACvBzB,EAAAA;AADuB,CAA3B;AAIA,eAAeC,OAAO,CAACqB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CvB,YAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {setComponentState} from \"../../../../../store/libraryState/actions\";\nimport {connect} from \"react-redux\";\n\n// форма - выпадающий список\nclass DropdownForm extends Component {\n    // значение по умолчанию\n    state = {\n        value: 'Regular',\n    }\n\n    // метод жизненного цикла, позволяющий сбросить значение формы,\n    // а также синхронизировать состояние формы со стилем компонента\n    static getDerivedStateFromProps(props, state) {\n        const {componentsState, componentName, styleType} = props;\n        const componentStyle = componentsState[componentName];\n\n        // если стили были сброшены вручную (resetStyles), то форма примет значения по умолчанию\n        if (componentStyle[styleType] === '' && state.value !== 'Regular') {\n            return { value: 'Regular' }\n        // синхронизация значения формы и стиля компонента\n        } else if (componentStyle[styleType] !== state.value && componentStyle[styleType] !== '') {\n            return { value: componentStyle[styleType] }\n        }\n\n        // в ином случае оставить без изменений\n        return null;\n    }\n\n    render () {\n        const {label, elements} = this.props;\n\n        // массив элементов выпадающего меню\n        const optionList = elements.map((element, index) => {\n           return <option value={element} key={index}>{element}</option>\n        });\n\n        return (\n            <form className=\"form\">\n                <label className=\"form__label\">{label}</label>\n                <div className=\"form__wrapper\">\n                    <select className=\"form__dropdown\"\n                            value={this.state.value}\n                            onChange={this.handleChange}>\n                        {optionList}\n                    </select>\n                </div>\n            </form>\n        )\n    }\n\n    // метод передает изменения с помощью функции-колбэка\n    handleChange = (event) => {\n        const {setComponentState, componentName, styleType} = this.props;\n        setComponentState(componentName, styleType, event.target.value);\n\n        this.setState({\n            value: event.target.value\n        })\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        componentName: state.currentComponent.componentName,\n        componentsState: state.libraryState\n    }\n}\n\nconst mapDispatchToProps = {\n    setComponentState\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DropdownForm);\n"]},"metadata":{},"sourceType":"module"}
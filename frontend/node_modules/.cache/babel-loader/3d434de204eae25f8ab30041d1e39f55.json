{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/AppMenu/FileBtn.js\";\nimport React, { Component } from 'react';\nimport { fileIcon } from './InnerTree';\nimport { connect } from \"react-redux\";\nimport { setComponentName } from \"../../store/currentComponent/actions\"; // FileBtn – компонент-кнопка, отображающая название файла на боковой панели\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FileBtn extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isFocused: false\n    };\n\n    this.displayComponent = () => {\n      const {\n        setComponentName,\n        file,\n        isUserComponent,\n        userComponents\n      } = this.props;\n      const fileName = file.slice(0, -3);\n\n      if (isUserComponent && Object.keys(userComponents).length) {\n        for (let component of userComponents) {\n          if (component.component_name === fileName) {\n            const prototype = component.prototype;\n            setComponentName(prototype);\n          }\n        }\n      } else {\n        setComponentName(fileName);\n      } // присвоить компоненту фокус, если он отображается, и наоборот\n\n\n      this.setState({\n        isFocused: !this.isFocused()\n      });\n    };\n\n    this.eliminate = () => {\n      this.setState({\n        isFocused: !this.isFocused()\n      });\n    };\n\n    this.isFocused = () => {\n      return this.state.isFocused;\n    };\n  }\n\n  // метод, вызывающийся перед рендером компонента\n  // метод позволяет отследить изменение фокуса на компоненте\n  static getDerivedStateFromProps(props, state) {\n    const {\n      componentName,\n      file\n    } = props;\n    const fileName = file.slice(0, -3);\n    const isEqual = componentName === fileName; // если кнопка в фокусе,\n    // но ее название не совпадает с названием прожатой в данный момент кнопки,\n    // то фокус нужно снять, и наоборот\n\n    if (state.isFocused && !isEqual) {\n      return {\n        isFocused: false\n      };\n    } else if (!state.isFocused && isEqual) {\n      return {\n        isFocused: true\n      };\n    } // в ином случае оставить без изменений\n\n\n    return null;\n  }\n\n  render() {\n    const condition = this.isFocused() ? 'active' : 'disabled';\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"tree-element__file\",\n      onClick: this.displayComponent,\n      onMouseOver: this.eliminate,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tree-element__highlighter tree-element__highlighter_${condition}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), fileIcon, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-element__wrapper\",\n        children: this.props.file\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  } // метод вызывает колбэк, отображающий компонент или прячущий его\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    componentName: state.currentComponent.componentName\n  };\n};\n\nconst mapDispatchToProps = {\n  setComponentName\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBtn);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/AppMenu/FileBtn.js"],"names":["React","Component","fileIcon","connect","setComponentName","FileBtn","state","isFocused","displayComponent","file","isUserComponent","userComponents","props","fileName","slice","Object","keys","length","component","component_name","prototype","setState","eliminate","getDerivedStateFromProps","componentName","isEqual","render","condition","mapStateToProps","currentComponent","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport { fileIcon } from './InnerTree'\nimport {connect} from \"react-redux\";\nimport {setComponentName} from \"../../store/currentComponent/actions\";\n\n// FileBtn – компонент-кнопка, отображающая название файла на боковой панели\nclass FileBtn extends Component {\n    state = {\n        isFocused: false\n    }\n\n    // метод, вызывающийся перед рендером компонента\n    // метод позволяет отследить изменение фокуса на компоненте\n    static getDerivedStateFromProps(props, state) {\n        const { componentName, file } = props;\n        const fileName = file.slice(0, -3);\n        const isEqual = componentName === fileName;\n\n        // если кнопка в фокусе,\n        // но ее название не совпадает с названием прожатой в данный момент кнопки,\n        // то фокус нужно снять, и наоборот\n        if (state.isFocused && !isEqual) {\n            return { isFocused: false }\n        } else if (!state.isFocused && isEqual) {\n            return { isFocused: true }\n        }\n\n        // в ином случае оставить без изменений\n        return null;\n    }\n\n    render() {\n        const condition = this.isFocused() ? 'active' : 'disabled';\n\n        return (\n            <button className=\"tree-element__file\"\n                    onClick={ this.displayComponent }\n                    onMouseOver={ this.eliminate }>\n                <div className={`tree-element__highlighter tree-element__highlighter_${condition}`}/>\n                    {fileIcon}\n                <div className=\"tree-element__wrapper\">\n                    {this.props.file}\n                </div>\n            </button>\n        )\n    }\n\n    // метод вызывает колбэк, отображающий компонент или прячущий его\n    displayComponent = () => {\n        const { setComponentName, file, isUserComponent, userComponents } = this.props;\n        const fileName = file.slice(0, -3);\n\n        if (isUserComponent && Object.keys(userComponents).length) {\n            for (let component of userComponents) {\n                if (component.component_name === fileName) {\n                    const prototype = component.prototype;\n                    setComponentName(prototype);\n                }\n            }\n        } else {\n            setComponentName(fileName);\n        }\n\n        // присвоить компоненту фокус, если он отображается, и наоборот\n        this.setState({\n            isFocused: !this.isFocused()\n        })\n    }\n\n    // подсвечивает компонент при наведении мыши\n    eliminate = () => {\n        this.setState({\n            isFocused: !this.isFocused()\n        })\n    }\n\n    isFocused = () => {\n        return this.state.isFocused;\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        componentName: state.currentComponent.componentName\n    }\n}\n\nconst mapDispatchToProps = {\n    setComponentName\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileBtn);"]},"metadata":{},"sourceType":"module"}
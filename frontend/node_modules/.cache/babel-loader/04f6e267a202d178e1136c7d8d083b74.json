{"ast":null,"code":"// StyleReader ответственен за преобразование объекта свойств компонента в его стили\nclass StyleReader {\n  constructor(componentStyle) {\n    this._componentStyle = componentStyle;\n    this._style = {};\n    this._userClassName = '';\n    this._btn = 'Classic';\n  } // геттер для получения значения атрибута className,\n  // регулирующего стили компонента (задействуется в экспорте)\n\n\n  get className() {\n    return this._buildClassName(this._componentStyle);\n  } // геттер для получения пользовательского класса\n\n\n  get userClassName() {\n    this._decomposeComponentStyle();\n\n    return this._userClassName;\n  } // геттер для получения объекта стилей компонента\n\n\n  get style() {\n    this._decomposeComponentStyle();\n\n    return this._style;\n  } // геттер для получения выбранной пользователем кнопки\n\n\n  get button() {\n    this._decomposeComponentStyle();\n\n    return this._btn;\n  } // геттер для получения выбранной пользователем картинки\n\n\n  get url() {\n    this._decomposeComponentStyle();\n\n    return this._url;\n  } // метод, раскладывающий объект свойств конкретного компонента,\n  // на данные для геттеров, описанных выше\n\n\n  _decomposeComponentStyle() {\n    const properties = Object.keys(this._componentStyle); // для каждого свойства подбирает свой стиль\n\n    properties.forEach(property => {\n      const value = this._componentStyle[property]; // если свойство пусто, то стиль задан не был,\n      // и отображение такого стиля не требуется\n\n      if (value === '') return null; // подбор в соответствии с названием свойства\n\n      switch (property) {\n        case 'fs':\n          this._style.fontSize = value + 'px';\n          break;\n\n        case 'fw':\n          this._style.fontWeight = this._handleFwProperty(value);\n          break;\n\n        case 'bg':\n          this._style.background = value;\n          break;\n\n        case 'cl':\n          this._style.color = value;\n          break;\n\n        case 'bc':\n          this._style.borderColor = value;\n          break;\n\n        case 'bw':\n          this._style.borderWidth = value + 'px';\n          break;\n\n        case 'oc':\n          this._style.outlineColor = value;\n          break;\n\n        case 'ow':\n          this._style.outlineWidth = value + 'px';\n          break;\n\n        case 'br':\n          this._style.borderRadius = value + 'px';\n          break;\n\n        case 'wd':\n          if (value < 80) break;\n          this._style.width = value + 'px';\n          break;\n\n        case 'btn':\n          this._btn = value;\n          break;\n\n        case 'url':\n          this._url = value;\n          break;\n\n        case 'text':\n          break;\n\n        case 'mask':\n          break;\n        // если соответствие не найден, то это пользовательский класс\n\n        default:\n          this._userClassName += property;\n      } // добавить пробел после пользовательского класса, если последний имеется\n\n\n      if (this._userClassName !== '') this._userClassName += ' ';\n    });\n  } // метод, переводящий значение толщины шрифта в приемлемый формат\n\n\n  _handleFwProperty(value) {\n    switch (value.toLowerCase()) {\n      case 'light':\n        return '400';\n\n      case 'bold':\n        return '600';\n\n      default:\n        return '500';\n    }\n  } // строит значение атрибута className, регулирующего стиль компонента\n\n\n  _buildClassName(componentStyle) {\n    let className = '';\n\n    for (let style in componentStyle) {\n      if (style !== 'text' && style !== 'btn' && style !== 'url' && componentStyle.hasOwnProperty(style) && componentStyle[style] !== '') {\n        // формат ввода стилей, с которым работает пользователь\n        // сначала идет тип стиля, затем его значение\n        className += `${style}-${componentStyle[style].toLowerCase()} `;\n      }\n    }\n\n    return className.trim();\n  }\n\n}\n\nexport default StyleReader;","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/utils/StyleReader.js"],"names":["StyleReader","constructor","componentStyle","_componentStyle","_style","_userClassName","_btn","className","_buildClassName","userClassName","_decomposeComponentStyle","style","button","url","_url","properties","Object","keys","forEach","property","value","fontSize","fontWeight","_handleFwProperty","background","color","borderColor","borderWidth","outlineColor","outlineWidth","borderRadius","width","toLowerCase","hasOwnProperty","trim"],"mappings":"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","sourcesContent":["// StyleReader ответственен за преобразование объекта свойств компонента в его стили\nclass StyleReader {\n    constructor(componentStyle) {\n        this._componentStyle = componentStyle;\n        this._style = {};\n        this._userClassName = '';\n        this._btn = 'Classic';\n    }\n\n    // геттер для получения значения атрибута className,\n    // регулирующего стили компонента (задействуется в экспорте)\n    get className() {\n        return this._buildClassName(this._componentStyle)\n    }\n\n    // геттер для получения пользовательского класса\n    get userClassName() {\n        this._decomposeComponentStyle();\n        return this._userClassName;\n    }\n\n    // геттер для получения объекта стилей компонента\n    get style() {\n        this._decomposeComponentStyle();\n        return this._style;\n    }\n\n    // геттер для получения выбранной пользователем кнопки\n    get button() {\n        this._decomposeComponentStyle();\n        return this._btn;\n    }\n\n    // геттер для получения выбранной пользователем картинки\n    get url() {\n        this._decomposeComponentStyle();\n        return this._url;\n    }\n\n    // метод, раскладывающий объект свойств конкретного компонента,\n    // на данные для геттеров, описанных выше\n     _decomposeComponentStyle() {\n        const properties = Object.keys(this._componentStyle);\n\n        // для каждого свойства подбирает свой стиль\n        properties.forEach(property => {\n            const value = this._componentStyle[property];\n            // если свойство пусто, то стиль задан не был,\n            // и отображение такого стиля не требуется\n            if (value === '') return null;\n\n            // подбор в соответствии с названием свойства\n            switch (property) {\n                case 'fs':\n                    this._style.fontSize = value + 'px';\n                    break;\n                case 'fw':\n                    this._style.fontWeight = this._handleFwProperty(value);\n                    break;\n                case 'bg':\n                    this._style.background = value;\n                    break;\n                case 'cl':\n                    this._style.color = value;\n                    break;\n                case 'bc':\n                    this._style.borderColor = value;\n                    break;\n                case 'bw':\n                    this._style.borderWidth = value + 'px';\n                    break;\n                case 'oc':\n                    this._style.outlineColor = value;\n                    break;\n                case 'ow':\n                    this._style.outlineWidth = value + 'px';\n                    break;\n                case 'br':\n                    this._style.borderRadius = value + 'px';\n                    break;\n                case 'wd':\n                    if (value < 80) break;\n                    this._style.width = value + 'px';\n                    break;\n                case 'btn':\n                    this._btn = value;\n                    break;\n                case 'url':\n                    this._url = value;\n                    break;\n                case 'text':\n                    break;\n                case 'mask':\n                    break;\n                // если соответствие не найден, то это пользовательский класс\n                default:\n                    this._userClassName += property;\n            }\n\n            // добавить пробел после пользовательского класса, если последний имеется\n            if (this._userClassName !== '') this._userClassName += ' ';\n        });\n    }\n\n    // метод, переводящий значение толщины шрифта в приемлемый формат\n    _handleFwProperty(value) {\n        switch (value.toLowerCase()) {\n            case 'light':\n                return '400';\n            case 'bold':\n                return '600';\n            default:\n                return '500';\n        }\n    }\n\n    // строит значение атрибута className, регулирующего стиль компонента\n    _buildClassName(componentStyle) {\n        let className = '';\n\n        for (let style in componentStyle) {\n            if (\n                style !== 'text' &&\n                style !== 'btn' &&\n                style !== 'url' &&\n                componentStyle.hasOwnProperty(style) &&\n                componentStyle[style] !== ''\n            ) {\n                // формат ввода стилей, с которым работает пользователь\n                // сначала идет тип стиля, затем его значение\n                className += `${style}-${componentStyle[style].toLowerCase()} `\n            }\n        }\n\n        return className.trim();\n    }\n}\n\nexport default StyleReader;"]},"metadata":{},"sourceType":"module"}
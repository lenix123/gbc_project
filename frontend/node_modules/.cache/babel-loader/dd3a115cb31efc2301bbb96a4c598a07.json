{"ast":null,"code":"var _jsxFileName = \"/home/rewsage/WebstormProjects/gbc/src/components/FileTreeElement.js\";\nimport React, { Component } from 'react';\nimport { fileIcon } from './InnerTree';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FileTreeElement extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isCalled: false\n    };\n\n    this.displayComponent = () => {\n      const {\n        callComponent\n      } = this.props;\n      const fileName = this.props.file.slice(0, -3);\n      callComponent(fileName);\n      this.setState({\n        isCalled: !this.isCalled()\n      });\n    };\n\n    this.isCalled = () => {\n      return this.state.isCalled;\n    };\n  }\n\n  render() {\n    const condition = this.isCalled() ? 'active' : 'disabled';\n    const {\n      userComponent\n    } = this.props;\n    const fileName = this.props.file.slice(0, -3);\n    const isEqual = userComponent === fileName;\n\n    if (this.isCalled() && !isEqual) {\n      this.setState({\n        isCalled: false\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"tree-element__file\",\n      onClick: this.displayComponent,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `highlighter ${condition}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), fileIcon, this.props.file]\n    }, this.props.index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default FileTreeElement;","map":{"version":3,"sources":["/home/rewsage/WebstormProjects/gbc/src/components/FileTreeElement.js"],"names":["React","Component","fileIcon","FileTreeElement","state","isCalled","displayComponent","callComponent","props","fileName","file","slice","setState","render","condition","userComponent","isEqual","index"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;;;AAEA,MAAMC,eAAN,SAA8BF,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCG,KADoC,GAC5B;AACJC,MAAAA,QAAQ,EAAE;AADN,KAD4B;;AAAA,SA4BpCC,gBA5BoC,GA4BjB,MAAM;AACrB,YAAM;AAACC,QAAAA;AAAD,UAAkB,KAAKC,KAA7B;AACA,YAAMC,QAAQ,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,CAAjB;AAEAJ,MAAAA,aAAa,CAACE,QAAD,CAAb;AAEA,WAAKG,QAAL,CAAc;AACVP,QAAAA,QAAQ,EAAE,CAAC,KAAKA,QAAL;AADD,OAAd;AAGH,KArCmC;;AAAA,SAuCpCA,QAvCoC,GAuCzB,MAAM;AACb,aAAO,KAAKD,KAAL,CAAWC,QAAlB;AACH,KAzCmC;AAAA;;AAKpCQ,EAAAA,MAAM,GAAG;AACL,UAAMC,SAAS,GAAG,KAAKT,QAAL,KAAkB,QAAlB,GAA6B,UAA/C;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAoB,KAAKP,KAA/B;AACA,UAAMC,QAAQ,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,CAAjB;AACA,UAAMK,OAAO,GAAGD,aAAa,KAAKN,QAAlC;;AAEA,QAAI,KAAKJ,QAAL,MAAmB,CAACW,OAAxB,EAAiC;AAC7B,WAAKJ,QAAL,CAAc;AACVP,QAAAA,QAAQ,EAAE;AADA,OAAd;AAGH;;AAED,wBACI;AAAQ,MAAA,SAAS,EAAC,oBAAlB;AAEQ,MAAA,OAAO,EAAG,KAAKC,gBAFvB;AAAA,8BAGI;AAAK,QAAA,SAAS,EAAG,eAAcQ,SAAU;AAAzC;AAAA;AAAA;AAAA;AAAA,cAHJ,EAIKZ,QAJL,EAKK,KAAKM,KAAL,CAAWE,IALhB;AAAA,OACa,KAAKF,KAAL,CAAWS,KADxB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AA1BmC;;AA4CxC,eAAed,eAAf","sourcesContent":["import React, {Component} from 'react'\nimport { fileIcon } from './InnerTree'\n\nclass FileTreeElement extends Component {\n    state = {\n        isCalled: false\n    }\n\n    render() {\n        const condition = this.isCalled() ? 'active' : 'disabled';\n        const { userComponent } = this.props;\n        const fileName = this.props.file.slice(0, -3);\n        const isEqual = userComponent === fileName;\n\n        if (this.isCalled() && !isEqual) {\n            this.setState({\n                isCalled: false\n            })\n        }\n\n        return (\n            <button className=\"tree-element__file\"\n                    key={this.props.index}\n                    onClick={ this.displayComponent }>\n                <div className={`highlighter ${condition}`}/>\n                {fileIcon}\n                {this.props.file}\n            </button>\n        )\n    }\n\n    displayComponent = () => {\n        const {callComponent} = this.props;\n        const fileName = this.props.file.slice(0, -3);\n\n        callComponent(fileName)\n\n        this.setState({\n            isCalled: !this.isCalled()\n        })\n    }\n\n    isCalled = () => {\n        return this.state.isCalled;\n    }\n}\n\nexport default FileTreeElement;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/rewsage/WebstormProjects/gbc/src/components/ThemeContext.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Provider,\n  Consumer\n} = /*#__PURE__*/React.createContext();\n\nclass ThemeContextProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      theme: \"Dark\"\n    };\n\n    this.toggleTheme = () => {\n      this.setState(prevState => {\n        return {\n          theme: prevState.theme === \"Dark\" ? \"Light\" : \"Dark\"\n        };\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Provider, {\n      value: \"Dark\",\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport { ThemeContextProvider, Consumer as ThemeContextConsumer };","map":{"version":3,"sources":["/home/rewsage/WebstormProjects/gbc/src/components/ThemeContext.js"],"names":["React","Component","Provider","Consumer","createContext","ThemeContextProvider","state","theme","toggleTheme","setState","prevState","render","props","children","ThemeContextConsumer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,MAAM;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,iBAAyBH,KAAK,CAACI,aAAN,EAA/B;;AAEA,MAAMC,oBAAN,SAAmCJ,SAAnC,CAA6C;AAAA;AAAA;AAAA,SACzCK,KADyC,GACjC;AACJC,MAAAA,KAAK,EAAE;AADH,KADiC;;AAAA,SASzCC,WATyC,GAS3B,MAAM;AAChB,WAAKC,QAAL,CAAcC,SAAS,IAAI;AACvB,eAAO;AACHH,UAAAA,KAAK,EAAEG,SAAS,CAACH,KAAV,KAAoB,MAApB,GAA6B,OAA7B,GAAuC;AAD3C,SAAP;AAGH,OAJD;AAKH,KAfwC;AAAA;;AAKzCI,EAAAA,MAAM,GAAG;AACL,wBAAO,QAAC,QAAD;AAAU,MAAA,KAAK,EAAE,MAAjB;AAAA,gBAA0B,KAAKC,KAAL,CAAWC;AAArC;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAPwC;;AAkB7C,SAASR,oBAAT,EAA+BF,QAAQ,IAAIW,oBAA3C","sourcesContent":["import React, { Component } from \"react\";\nconst { Provider, Consumer } = React.createContext();\n\nclass ThemeContextProvider extends Component {\n    state = {\n        theme: \"Dark\",\n    };\n\n    render() {\n        return <Provider value={\"Dark\"}>{this.props.children}</Provider>;\n    }\n\n    toggleTheme = () => {\n        this.setState(prevState => {\n            return {\n                theme: prevState.theme === \"Dark\" ? \"Light\" : \"Dark\"\n            };\n        });\n    };\n}\n\nexport { ThemeContextProvider, Consumer as ThemeContextConsumer };"]},"metadata":{},"sourceType":"module"}
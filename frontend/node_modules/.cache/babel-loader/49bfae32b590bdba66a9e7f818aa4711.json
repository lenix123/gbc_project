{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/ExportMenu/Instruction.js\";\nimport React from \"react\";\nimport DisplayingText from \"./DisplayingText\";\nimport CopyButton from \"./CopyButton\";\nimport textBuilder from \"../../../utils/textBuilder\";\nimport { connect } from \"react-redux\"; // компонент Instruction отвечает за вывод одного блока инструкции,\n// то есть теста инструкции и кнопки \"копировать\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Instruction extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.importText = componentName => {\n      return `import ${componentName} from \"path/to/Library/${componentName}/${componentName}\";`;\n    };\n  }\n\n  render() {\n    const {\n      type,\n      componentName,\n      componentsState\n    } = this.props;\n    let text;\n\n    if (type === \"import\") {\n      // формируем инструкцию по импорту компанента\n      text = this.importText(componentName);\n\n      if (componentName === \"Card\") {\n        // импортируем кнопку для компонента Card\n        const buttonName = componentsState[\"Card\"].btn || \"Classic\";\n        text += `\\n${this.importText(buttonName)}`;\n      } else if (componentName === \"Entry\") {\n        // импортируем составные компоненты для Entry\n        const formType = componentsState[\"Entry\"].type || \"Email\";\n        text += `\\n${this.importText(formType)}`;\n        text += `\\n${this.importText(\"Password\")}`;\n        const buttonName = componentsState[\"Entry\"].btn || \"Classic\";\n        text += `\\n${this.importText(buttonName)}`;\n      }\n    } else if (type === \"tag\") {\n      // формируем инструкцию по вызову компонента\n      text = textBuilder(componentName, componentsState); // заменяем все символы табуляции на 4 пробела,\n      // так код выглядит лучше\n\n      text = text.replaceAll(/\\t/g, \"    \");\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instruction\",\n      children: [/*#__PURE__*/_jsxDEV(DisplayingText, {\n        text: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CopyButton, {\n        text: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    componentName: state.currentComponent.componentName,\n    componentsState: state.libraryState\n  };\n};\n\nexport default connect(mapStateToProps)(Instruction);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/ExportMenu/Instruction.js"],"names":["React","DisplayingText","CopyButton","textBuilder","connect","Instruction","Component","importText","componentName","render","type","componentsState","props","text","buttonName","btn","formType","replaceAll","mapStateToProps","state","currentComponent","libraryState"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;AACA;;;;AACA,MAAMC,WAAN,SAA0BL,KAAK,CAACM,SAAhC,CAA0C;AAAA;AAAA;;AAAA,SAqCtCC,UArCsC,GAqCxBC,aAAD,IAAmB;AAC5B,aAAQ,UAASA,aAAc,0BAAyBA,aAAc,IAAGA,aAAc,IAAvF;AACH,KAvCqC;AAAA;;AACtCC,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA,IAAD;AAAOF,MAAAA,aAAP;AAAsBG,MAAAA;AAAtB,QAAyC,KAAKC,KAApD;AACA,QAAIC,IAAJ;;AAEA,QAAIH,IAAI,KAAK,QAAb,EAAuB;AACnB;AACAG,MAAAA,IAAI,GAAG,KAAKN,UAAL,CAAgBC,aAAhB,CAAP;;AACA,UAAIA,aAAa,KAAK,MAAtB,EAA8B;AAC1B;AACA,cAAMM,UAAU,GAAGH,eAAe,CAAC,MAAD,CAAf,CAAwBI,GAAxB,IAA+B,SAAlD;AACAF,QAAAA,IAAI,IAAK,KAAI,KAAKN,UAAL,CAAgBO,UAAhB,CAA4B,EAAzC;AACH,OAJD,MAIO,IAAIN,aAAa,KAAK,OAAtB,EAA+B;AAClC;AACA,cAAMQ,QAAQ,GAAGL,eAAe,CAAC,OAAD,CAAf,CAAyBD,IAAzB,IAAiC,OAAlD;AACAG,QAAAA,IAAI,IAAK,KAAI,KAAKN,UAAL,CAAgBS,QAAhB,CAA0B,EAAvC;AACAH,QAAAA,IAAI,IAAK,KAAI,KAAKN,UAAL,CAAgB,UAAhB,CAA4B,EAAzC;AAEA,cAAMO,UAAU,GAAGH,eAAe,CAAC,OAAD,CAAf,CAAyBI,GAAzB,IAAgC,SAAnD;AACAF,QAAAA,IAAI,IAAK,KAAI,KAAKN,UAAL,CAAgBO,UAAhB,CAA4B,EAAzC;AACH;AACJ,KAhBD,MAgBO,IAAIJ,IAAI,KAAK,KAAb,EAAoB;AACvB;AACAG,MAAAA,IAAI,GAAGV,WAAW,CAACK,aAAD,EAAgBG,eAAhB,CAAlB,CAFuB,CAGvB;AACA;;AACAE,MAAAA,IAAI,GAAGA,IAAI,CAACI,UAAL,CAAgB,KAAhB,EAAuB,MAAvB,CAAP;AACH;;AAED,wBACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI,QAAC,cAAD;AAAgB,QAAA,IAAI,EAAEJ;AAAtB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAY,QAAA,IAAI,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAnCqC;;AA0C1C,MAAMK,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHX,IAAAA,aAAa,EAAEW,KAAK,CAACC,gBAAN,CAAuBZ,aADnC;AAEHG,IAAAA,eAAe,EAAEQ,KAAK,CAACE;AAFpB,GAAP;AAIH,CALD;;AAOA,eAAejB,OAAO,CAACc,eAAD,CAAP,CAAyBb,WAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport DisplayingText from \"./DisplayingText\";\nimport CopyButton from \"./CopyButton\";\nimport textBuilder from \"../../../utils/textBuilder\";\nimport {connect} from \"react-redux\";\n\n// компонент Instruction отвечает за вывод одного блока инструкции,\n// то есть теста инструкции и кнопки \"копировать\"\nclass Instruction extends React.Component {\n    render() {\n        const {type, componentName, componentsState} = this.props;\n        let text;\n\n        if (type === \"import\") {\n            // формируем инструкцию по импорту компанента\n            text = this.importText(componentName);\n            if (componentName === \"Card\") {\n                // импортируем кнопку для компонента Card\n                const buttonName = componentsState[\"Card\"].btn || \"Classic\";\n                text += `\\n${this.importText(buttonName)}`;\n            } else if (componentName === \"Entry\") {\n                // импортируем составные компоненты для Entry\n                const formType = componentsState[\"Entry\"].type || \"Email\";\n                text += `\\n${this.importText(formType)}`;\n                text += `\\n${this.importText(\"Password\")}`;\n\n                const buttonName = componentsState[\"Entry\"].btn || \"Classic\";\n                text += `\\n${this.importText(buttonName)}`;\n            }\n        } else if (type === \"tag\") {\n            // формируем инструкцию по вызову компонента\n            text = textBuilder(componentName, componentsState);\n            // заменяем все символы табуляции на 4 пробела,\n            // так код выглядит лучше\n            text = text.replaceAll(/\\t/g, \"    \");\n        }\n\n        return (\n            <div className=\"instruction\">\n                <DisplayingText text={text}/>\n                <CopyButton text={text}/>\n            </div>\n        )\n    }\n\n    importText = (componentName) => {\n        return `import ${componentName} from \"path/to/Library/${componentName}/${componentName}\";`;\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        componentName: state.currentComponent.componentName,\n        componentsState: state.libraryState\n    }\n}\n\nexport default connect(mapStateToProps)(Instruction);"]},"metadata":{},"sourceType":"module"}
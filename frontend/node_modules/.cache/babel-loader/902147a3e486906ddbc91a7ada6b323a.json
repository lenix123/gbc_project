{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/DropdownForm.js\";\nimport React, { Component } from 'react';\nimport { setComponentState } from \"../../../../../store/libraryState/actions\";\nimport { connect } from \"react-redux\";\nimport { setUserComponentStyle } from \"../../../../../store/userLibrary/actions\"; // форма - выпадающий список\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DropdownForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      value: 'Regular'\n    };\n\n    this.handleChange = event => {\n      const {\n        setComponentState,\n        setUserComponentStyle,\n        styleType,\n        componentName,\n        isUserComponent,\n        userComponentName\n      } = this.props;\n      const value = event.target.value;\n\n      if (isUserComponent) {\n        setUserComponentStyle(userComponentName, styleType, value);\n      } else {\n        setComponentState(componentName, styleType, value);\n      }\n\n      this.setState({\n        value: value\n      });\n    };\n  }\n\n  // метод жизненного цикла, позволяющий сбросить значение формы,\n  // а также синхронизировать состояние формы со стилем компонента\n  static getDerivedStateFromProps(props, state) {\n    const {\n      styleType,\n      isUserComponent,\n      componentName,\n      userComponentName\n    } = props;\n    let componentStates, componentStyles;\n\n    if (isUserComponent) {\n      componentStates = props.userLibrary;\n      componentStyles = componentStates && componentStates[userComponentName];\n    } else {\n      componentStates = props.componentsStates;\n      componentStyles = componentStates && componentStates[componentName];\n    } // если стили были сброшены вручную (resetStyles), то форма примет значения по умолчанию\n\n\n    if (componentStyles[styleType] === '' && state.value !== 'Regular') {\n      return {\n        value: 'Regular'\n      }; // синхронизация значения формы и стиля компонента\n    } else if (componentStyles[styleType] !== state.value && componentStyles[styleType] !== '') {\n      return {\n        value: componentStyles[styleType]\n      };\n    } // в ином случае оставить без изменений\n\n\n    return null;\n  }\n\n  render() {\n    const {\n      label,\n      elements\n    } = this.props; // массив элементов выпадающего меню\n\n    const optionList = elements.map((element, index) => {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: element,\n        children: element\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form__label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form__dropdown\",\n          value: this.state.value,\n          onChange: this.handleChange,\n          children: optionList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  } // метод передает изменения с помощью функции-колбэка\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    componentName: state.currentComponent.componentName,\n    componentsStates: state.libraryState,\n    isUserComponent: state.currentComponent.isUserComponent,\n    userComponentName: state.currentComponent.userComponentName,\n    userLibrary: state.userLibrary\n  };\n};\n\nconst mapDispatchToProps = {\n  setComponentState,\n  setUserComponentStyle\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(DropdownForm);","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/ControlCenter/StyleMenu/Forms/InputForms/DropdownForm.js"],"names":["React","Component","setComponentState","connect","setUserComponentStyle","DropdownForm","state","value","handleChange","event","styleType","componentName","isUserComponent","userComponentName","props","target","setState","getDerivedStateFromProps","componentStates","componentStyles","userLibrary","componentsStates","render","label","elements","optionList","map","element","index","mapStateToProps","currentComponent","libraryState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {setComponentState} from \"../../../../../store/libraryState/actions\";\nimport {connect} from \"react-redux\";\nimport {setUserComponentStyle} from \"../../../../../store/userLibrary/actions\";\n\n// форма - выпадающий список\nclass DropdownForm extends Component {\n    // значение по умолчанию\n    state = {\n        value: 'Regular',\n    }\n\n    // метод жизненного цикла, позволяющий сбросить значение формы,\n    // а также синхронизировать состояние формы со стилем компонента\n    static getDerivedStateFromProps(props, state) {\n        const {styleType, isUserComponent, componentName, userComponentName} = props;\n\n        let componentStates, componentStyles;\n\n        if (isUserComponent) {\n            componentStates = props.userLibrary;\n            componentStyles = componentStates && componentStates[userComponentName];\n        } else {\n            componentStates = props.componentsStates;\n            componentStyles = componentStates && componentStates[componentName];\n        }\n\n        // если стили были сброшены вручную (resetStyles), то форма примет значения по умолчанию\n        if (componentStyles[styleType] === '' && state.value !== 'Regular') {\n            return { value: 'Regular' }\n        // синхронизация значения формы и стиля компонента\n        } else if (componentStyles[styleType] !== state.value && componentStyles[styleType] !== '') {\n            return { value: componentStyles[styleType] }\n        }\n\n        // в ином случае оставить без изменений\n        return null;\n    }\n\n    render () {\n        const {label, elements} = this.props;\n\n        // массив элементов выпадающего меню\n        const optionList = elements.map((element, index) => {\n           return <option value={element} key={index}>{element}</option>\n        });\n\n        return (\n            <form className=\"form\">\n                <label className=\"form__label\">{label}</label>\n                <div className=\"form__wrapper\">\n                    <select className=\"form__dropdown\"\n                            value={this.state.value}\n                            onChange={this.handleChange}>\n                        {optionList}\n                    </select>\n                </div>\n            </form>\n        )\n    }\n\n    // метод передает изменения с помощью функции-колбэка\n    handleChange = (event) => {\n        const {setComponentState, setUserComponentStyle, styleType, componentName, isUserComponent, userComponentName} = this.props;\n        const value = event.target.value;\n\n        if (isUserComponent) {\n            setUserComponentStyle(userComponentName, styleType, value);\n        } else {\n            setComponentState(componentName, styleType, value);\n        }\n\n        this.setState({\n            value: value,\n        })\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        componentName: state.currentComponent.componentName,\n        componentsStates: state.libraryState,\n        isUserComponent: state.currentComponent.isUserComponent,\n        userComponentName: state.currentComponent.userComponentName,\n        userLibrary: state.userLibrary,\n    }\n}\n\nconst mapDispatchToProps = {\n    setComponentState,\n    setUserComponentStyle,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DropdownForm);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { SHOW_NEW_COMPONENT } from \"./actions\";\nconst defaultState = {\n  componentName: \"\",\n  isUserComponent: false\n};\nexport const currentComponentReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SHOW_NEW_COMPONENT:\n      // если пользователь вызывает компонент, который уже отображается,\n      // значит этот компанент больше не нужно отображать\n      if (action.payload.componentName === state.componentName) {\n        return { ...state,\n          componentName: \"\",\n          isUserComponent: action.payload.isUserComponent\n        };\n      } else {\n        // если пользователь вызывает новый компонент из библиотеки,\n        // то его нужно отобразить\n        return { ...state,\n          componentName: action.payload.componentName,\n          isUserComponent: action.payload.isUserComponent\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/store/currentComponent/reducers.js"],"names":["SHOW_NEW_COMPONENT","defaultState","componentName","isUserComponent","currentComponentReducer","state","action","type","payload"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,WAAnC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,aAAa,EAAE,EADE;AAEjBC,EAAAA,eAAe,EAAE;AAFA,CAArB;AAKA,OAAO,MAAMC,uBAAuB,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACrE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,kBAAL;AACI;AACA;AACA,UAAIM,MAAM,CAACE,OAAP,CAAeN,aAAf,KAAiCG,KAAK,CAACH,aAA3C,EAA0D;AACtD,eAAO,EACH,GAAGG,KADA;AAEHH,UAAAA,aAAa,EAAE,EAFZ;AAGHC,UAAAA,eAAe,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAH7B,SAAP;AAKH,OAND,MAMO;AACH;AACA;AACA,eAAO,EACH,GAAGE,KADA;AAEHH,UAAAA,aAAa,EAAEI,MAAM,CAACE,OAAP,CAAeN,aAF3B;AAGHC,UAAAA,eAAe,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAH7B,SAAP;AAKH;;AACL;AACI,aAAOE,KAAP;AApBR;AAsBH,CAvBM","sourcesContent":["import { SHOW_NEW_COMPONENT } from \"./actions\";\n\nconst defaultState = {\n    componentName: \"\",\n    isUserComponent: false,\n};\n\nexport const currentComponentReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case SHOW_NEW_COMPONENT:\n            // если пользователь вызывает компонент, который уже отображается,\n            // значит этот компанент больше не нужно отображать\n            if (action.payload.componentName === state.componentName) {\n                return {\n                    ...state,\n                    componentName: \"\",\n                    isUserComponent: action.payload.isUserComponent\n                }\n            } else {\n                // если пользователь вызывает новый компонент из библиотеки,\n                // то его нужно отобразить\n                return {\n                    ...state,\n                    componentName: action.payload.componentName,\n                    isUserComponent: action.payload.isUserComponent\n                }\n            }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}
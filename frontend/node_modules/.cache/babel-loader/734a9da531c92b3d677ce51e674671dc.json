{"ast":null,"code":"var _jsxFileName = \"/home/lenix/PycharmProjects/GBC/frontend/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport '../assets/css/App.scss';\nimport Sidebar from \"./AppMenu/Sidebar\";\nimport Header from \"./AppMenu/Header\";\nimport ThemeContext from \"./ThemeControl/ThemeContext\";\nimport Workspace from \"./Workspace\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"../store/reducers\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst store = createStore(rootReducer); // Компонент App несет в себе функцию отображения всего приложения в целом\n\nfunction App() {\n  _s();\n\n  const [userComponents, setUserComponents] = useState({\n    theme: 'light',\n    userComponents: null\n  });\n  useEffect(() => {\n    axios({\n      method: \"GET\",\n      url: \"http://127.0.0.1:8000/api/\"\n    }).then(response => {\n      const userComponents = response.data;\n      setUserComponents(userComponents);\n    });\n  }, [setUserComponents]);\n\n  if (!userComponents || userComponents.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u043D\\u0435\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: userComponents.map(userComponent => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: userComponent.type\n    }, userComponent.pk, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n} // class App extends Component {\n//     state = {\n//         theme: 'light',\n//     }\n//\n//     render() {\n//         return (\n//             // Provider позволяет дочерним компонентам подписаться на изменения UI-темы,\n//             // передавая в качестве пропсов значение темы (theme) и колбэк toggleTheme\n//             <Provider store={store}>\n//                 <ThemeContext.Provider value={ { theme: this.state.theme, toggleTheme: this.toggleTheme } }>\n//                     <main className={`app app_${this.state.theme}`}>\n//                         <section className=\"app__menu\">\n//                             <Header />\n//                             <Sidebar />\n//                         </section>\n//                         <Workspace />\n//                     </main>\n//                 </ThemeContext.Provider>\n//             </Provider>\n//         );\n//     }\n//\n//     // функция toggleTheme устанавливает тему оформления приложения\n//     toggleTheme = () => {\n//         this.setState({\n//             theme: this.state.theme === 'light' ? 'dark' : 'light',\n//         });\n//     }\n// }\n\n\n_s(App, \"IrNVJ6vOCbrP3jhK0C/YkN50NEc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/lenix/PycharmProjects/GBC/frontend/src/components/App.js"],"names":["React","useState","useEffect","Sidebar","Header","ThemeContext","Workspace","Provider","createStore","rootReducer","axios","store","App","userComponents","setUserComponents","theme","method","url","then","response","data","length","map","userComponent","type","pk"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,wBAAP;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,WAAR,QAA0B,OAA1B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,KAAK,GAAGH,WAAW,CAACC,WAAD,CAAzB,C,CACA;;AAEA,SAASG,GAAT,GAAe;AAAA;;AACX,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC;AACjDc,IAAAA,KAAK,EAAE,OAD0C;AAEjDF,IAAAA,cAAc,EAAE;AAFiC,GAAD,CAApD;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,KAAK,CAAC;AACFM,MAAAA,MAAM,EAAE,KADN;AAEFC,MAAAA,GAAG,EAAE;AAFH,KAAD,CAAL,CAGGC,IAHH,CAGQC,QAAQ,IAAI;AAChB,YAAMN,cAAc,GAAGM,QAAQ,CAACC,IAAhC;AACAN,MAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACH,KAND;AAOH,GARQ,EAQN,CAACC,iBAAD,CARM,CAAT;;AAUA,MAAI,CAACD,cAAD,IAAmBA,cAAc,CAACQ,MAAf,KAA0B,CAAjD,EAAoD;AAChD,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAA,cACKR,cAAc,CAACS,GAAf,CAAoBC,aAAD,iBAChB;AAAA,gBAA2BA,aAAa,CAACC;AAAzC,OAAQD,aAAa,CAACE,EAAtB;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA3DSb,G;;KAAAA,G;AA6DT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport '../assets/css/App.scss';\nimport Sidebar from \"./AppMenu/Sidebar\";\nimport Header from \"./AppMenu/Header\";\nimport ThemeContext from \"./ThemeControl/ThemeContext\";\nimport Workspace from \"./Workspace\";\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport rootReducer from \"../store/reducers\";\nimport axios from \"axios\";\n\n\nconst store = createStore(rootReducer);\n// Компонент App несет в себе функцию отображения всего приложения в целом\n\nfunction App() {\n    const [userComponents, setUserComponents] = useState({\n        theme: 'light',\n        userComponents: null\n    })\n\n    useEffect(() => {\n        axios({\n            method: \"GET\",\n            url: \"http://127.0.0.1:8000/api/\"\n        }).then(response => {\n            const userComponents = response.data\n            setUserComponents(userComponents)\n        })\n    }, [setUserComponents])\n\n    if (!userComponents || userComponents.length === 0) {\n        return <p>данных нет</p>\n    }\n\n    return (\n        <div>\n            {userComponents.map((userComponent) =>\n                <p key={userComponent.pk}>{userComponent.type}</p>\n            )}\n        </div>\n    );\n}\n\n\n// class App extends Component {\n//     state = {\n//         theme: 'light',\n//     }\n//\n//     render() {\n//         return (\n//             // Provider позволяет дочерним компонентам подписаться на изменения UI-темы,\n//             // передавая в качестве пропсов значение темы (theme) и колбэк toggleTheme\n//             <Provider store={store}>\n//                 <ThemeContext.Provider value={ { theme: this.state.theme, toggleTheme: this.toggleTheme } }>\n//                     <main className={`app app_${this.state.theme}`}>\n//                         <section className=\"app__menu\">\n//                             <Header />\n//                             <Sidebar />\n//                         </section>\n//                         <Workspace />\n//                     </main>\n//                 </ThemeContext.Provider>\n//             </Provider>\n//         );\n//     }\n//\n//     // функция toggleTheme устанавливает тему оформления приложения\n//     toggleTheme = () => {\n//         this.setState({\n//             theme: this.state.theme === 'light' ? 'dark' : 'light',\n//         });\n//     }\n// }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}